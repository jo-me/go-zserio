{{ $scope := .pkg }}
{{ $field := .field }}
{{ $index := .index }}
{{ $native := goNativeType $scope $field.Type }}
{{- $field_name := printf "v.%s" $field.Name }}
{{- if $field.IsOptional}}
    {{- $field_name = printf "(*v.%s)" $field.Name }}
{{- end }}
{{- if and $native.RequiresCast (not $field.Array) }}
    {{- if $native.IsMarshaler }}
        {{- $field_name = printf "(*%s)(&v.%s)" (goType $scope $native.Type) $field.Name }}
        {{- if $field.IsOptional}}
            {{- $field_name = printf "(*%s)(v.%s)" (goType $scope $native.Type) $field.Name }}
        {{- end }}
    {{- else }}
        {{- $field_name = printf "%s(%s)" (goType $scope $native.Type) $field_name }}
    {{- end }}
{{- end }}


{{- if and (not $field.Array) (or ($native.IsMarshaler) (isDeltaPackable $scope $native.Type)) }}
    {{- if $field.OptionalClause }}
        if {{ goExpression $scope $field.OptionalClause }} {
    {{- end }}
    {{- if $field.IsOptional}}
        if v.{{ $field.Name }} != nil {
    {{- end }}

    {{- template "decode_compound_parameters.go.tmpl" dict "pkg" $scope "field" $field "field_name" $field_name }}
    {{- if $native.IsMarshaler }}
        if err := {{ $field_name }}.ZserioInitPackingContext(childrenNodes[{{ $index }}]); err != nil {
            return err
        }
    {{- else }}
        if field{{ $field.Name }}Context, ok := childrenNodes[{{ $index }}].Context.(*ztype.DeltaContext[{{ goType $scope $native.Type }}]); !ok {
            return errors.New("unknown context type")
        } else {
            traits := {{ template "instantiate_array_traits.go.tmpl" dict "pkg" $scope "type" $native.Type }}
            field{{ $field.Name }}Context.Init(traits, {{ goType $scope $native.Type }}({{ $field_name }}))
        }
    {{- end }}

    {{- if $field.IsOptional}}
        }
    {{- end }}
    {{- if $field.OptionalClause }}
        }
    {{- end }}
{{- end }}
