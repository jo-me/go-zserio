{{ $scope := .pkg }}
{{ $field := .field }}
{{ $native := goNativeType $scope $field.Type }} 
{{- $bit_size := $native.Type.Bits }}
{{- if $native.Type.LengthExpression }}
    {{- $bit_size = printf "uint8(%s)" (goExpression $scope $native.Type.LengthExpression) }}
{{- end }}
{{- $field_name := printf "v.%s" $field.Name }}
{{- if $field.IsOptional}}
    {{- $field_name = printf "(*v.%s)" $field.Name }}
{{- end }}
{{- if and $native.RequiresCast (not $field.Array) }}
    {{- if $native.IsMarshaler }}
        {{- $field_name = printf "(*%s)(&v.%s)" (goType $scope $native.Type) $field.Name }}
        {{- if $field.IsOptional}}
            {{- $field_name = printf "(*%s)(v.%s)" (goType $scope $native.Type) $field.Name }}
        {{- end }}
    {{- else }}
        {{- $field_name = printf "%s(%s)" (goType $scope $native.Type) $field_name }}
    {{- end }}
{{- end }}


{{- if $field.OptionalClause }}
    if {{ goExpression $scope $field.OptionalClause }} {
{{- end }}
{{- if not (eq $field.Alignment 0) }}
    if err := ztype.AlignWriter(w, {{ $field.Alignment }}); err != nil {
        return err
    }
{{- end }}
{{- if $field.IsOptional}}
    if err = ztype.WriteBool(w, v.{{ $field.Name }} != nil); err != nil {
        return err
    }
    if v.{{ $field.Name }} != nil {
{{- end }}
{{- if $field.Array }}
    {{- template "array_init.go.tmpl" dict "pkg" $scope "field_name" $field_name "field" $field "native" $native }}
    {{- if $field.Array.Length }}
        if len({{ $field_name }}) != int({{ goExpression $scope $field.Array.Length }}) {
            return errors.New("array size does not match!")
        }
    {{- end }}
    {{- if $native.IsMarshaler }}
    // The array type is a zserio object. The array traits expect array of
    // pointers, so convert from array of struct to array of struct pointers
    for index, _ := range {{ $field_name }} {
        {{ $field.Name }}PtrArray = append({{ $field.Name }}PtrArray, &{{ $field_name }}[index])
    }
    {{- end }}
    {{- $field_name = printf "%sArrayProperties" $field.Name }}
{{- end }}
{{- template "encode_compound_parameters.go.tmpl" dict "pkg" $scope "field" $field }}

{{- if and (not $native.IsMarshaler) (not $field.Array) }}
    {{- if or (gt $native.Type.Bits 0) $native.Type.LengthExpression}}
        {{- if eq $native.Type.Name "int" }}
            if err = ztype.WriteSignedBits(w, int64({{ $field_name }}), {{ $bit_size }}); err != nil {
        {{- else }}
            if err = ztype.WriteUnsignedBits(w, uint64({{ $field_name }}), {{ $bit_size }}); err != nil {
        {{- end }}
   {{- else }}
        if err = ztype.Write{{ title $native.Type.Name }}(w, {{ $field_name }}); err != nil {
    {{- end }}
        return err
    }
{{- else}}
    if err = {{ $field_name }}.MarshalZserio(w); err != nil {
        return err
    }
{{- end}}
{{- if $field.IsOptional}}
    }
{{- end }}
{{- if $field.OptionalClause }}
    }
{{- end }}
