// Code generated from parser/ZserioParser.g4 by ANTLR 4.13.1. DO NOT EDIT.

package parser // ZserioParser
import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type ZserioParser struct {
	*antlr.BaseParser
}

var ZserioParserParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func zserioparserParserInit() {
	staticData := &ZserioParserParserStaticData
	staticData.LiteralNames = []string{
		"", "'&'", "'='", "'!'", "':'", "','", "'/'", "'.'", "'=='", "'>='",
		"'>'", "'{'", "'['", "'<='", "'&&'", "'||'", "'('", "'<<'", "'<'", "'-'",
		"'%'", "'*'", "'!='", "'|'", "'+'", "'?'", "'}'", "']'", "')'", "';'",
		"'~'", "'^'", "'align'", "'bit'", "'bool'", "'bitmask'", "'bytes'",
		"'case'", "'choice'", "'const'", "'default'", "'enum'", "'explicit'",
		"'extern'", "'float16'", "'float32'", "'float64'", "'function'", "'if'",
		"'implicit'", "'import'", "'@index'", "'instantiate'", "'int'", "'int16'",
		"'int32'", "'int64'", "'int8'", "'isset'", "'lengthof'", "'numbits'",
		"'on'", "'optional'", "'package'", "'packed'", "'pubsub'", "'publish'",
		"'return'", "'rule'", "'rule_group'", "'service'", "'sql'", "'sql_database'",
		"'sql_table'", "'sql_virtual'", "'sql_without_rowid'", "'string'", "'struct'",
		"'subscribe'", "'subtype'", "'topic'", "'uint16'", "'uint32'", "'uint64'",
		"'uint8'", "'union'", "'using'", "'valueof'", "'varint'", "'varint16'",
		"'varint32'", "'varint64'", "'varsize'", "'varuint'", "'varuint16'",
		"'varuint32'", "'varuint64'", "'zserio_compatibility_version'",
	}
	staticData.SymbolicNames = []string{
		"", "AND", "ASSIGN", "BANG", "COLON", "COMMA", "DIVIDE", "DOT", "EQ",
		"GE", "GT", "LBRACE", "LBRACKET", "LE", "LOGICAL_AND", "LOGICAL_OR",
		"LPAREN", "LSHIFT", "LT", "MINUS", "MODULO", "MULTIPLY", "NE", "OR",
		"PLUS", "QUESTIONMARK", "RBRACE", "RBRACKET", "RPAREN", "SEMICOLON",
		"TILDE", "XOR", "ALIGN", "BIT_FIELD", "BOOL", "BITMASK", "BYTES", "CASE",
		"CHOICE", "CONST", "DEFAULT", "ENUM", "EXPLICIT", "EXTERN", "FLOAT16",
		"FLOAT32", "FLOAT64", "FUNCTION", "IF", "IMPLICIT", "IMPORT", "INDEX",
		"INSTANTIATE", "INT_FIELD", "INT16", "INT32", "INT64", "INT8", "ISSET",
		"LENGTHOF", "NUMBITS", "ON", "OPTIONAL", "PACKAGE", "PACKED", "PUBSUB",
		"PUBLISH", "RETURN", "RULE", "RULE_GROUP", "SERVICE", "SQL", "SQL_DATABASE",
		"SQL_TABLE", "SQL_VIRTUAL", "SQL_WITHOUT_ROWID", "STRING", "STRUCTURE",
		"SUBSCRIBE", "SUBTYPE", "TOPIC", "UINT16", "UINT32", "UINT64", "UINT8",
		"UNION", "USING", "VALUEOF", "VARINT", "VARINT16", "VARINT32", "VARINT64",
		"VARSIZE", "VARUINT", "VARUINT16", "VARUINT32", "VARUINT64", "COMPAT_VERSION",
		"WS", "DOC_COMMENT", "MARKDOWN_COMMENT", "BLOCK_COMMENT", "LINE_COMMENT",
		"BOOL_LITERAL", "STRING_LITERAL", "BINARY_LITERAL", "OCTAL_LITERAL",
		"HEXADECIMAL_LITERAL", "DOUBLE_LITERAL", "FLOAT_LITERAL", "DECIMAL_LITERAL",
		"ID", "INVALID_STRING_LITERAL", "INVALID_TOKEN", "RSHIFT",
	}
	staticData.RuleNames = []string{
		"packageDeclaration", "compatibilityVersionDirective", "packageNameDefinition",
		"importDeclaration", "languageDirective", "typeDeclaration", "symbolDefinition",
		"constDefinition", "ruleGroupDefinition", "ruleDefinition", "subtypeDeclaration",
		"structureDeclaration", "structureFieldDefinition", "fieldAlignment",
		"fieldOffset", "fieldTypeId", "fieldArrayRange", "fieldInitializer",
		"fieldOptionalClause", "fieldConstraint", "choiceDeclaration", "choiceCases",
		"choiceCase", "choiceDefault", "choiceFieldDefinition", "unionDeclaration",
		"unionFieldDefinition", "enumDeclaration", "enumItem", "bitmaskDeclaration",
		"bitmaskValue", "sqlTableDeclaration", "sqlTableFieldDefinition", "sqlConstraintDefinition",
		"sqlConstraint", "sqlWithoutRowId", "sqlDatabaseDefinition", "sqlDatabaseFieldDefinition",
		"serviceDefinition", "serviceMethodDefinition", "pubsubDefinition",
		"pubsubMessageDefinition", "topicDefinition", "functionDefinition",
		"functionType", "functionName", "functionBody", "typeParameters", "parameterDefinition",
		"templateParameters", "templateArguments", "templateArgument", "instantiateDeclaration",
		"expression", "literal", "id", "typeReference", "typeInstantiation",
		"builtinType", "qualifiedName", "typeArguments", "typeArgument", "dynamicLengthArgument",
		"intType", "varintType", "fixedBitFieldType", "dynamicBitFieldType",
		"boolType", "stringType", "floatType", "externType", "bytesType",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 114, 781, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7,
		4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7,
		10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15,
		2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2,
		21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26,
		7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7,
		31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36,
		2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2,
		42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47,
		7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7,
		52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57,
		2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2,
		63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 68,
		7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 1, 0, 3, 0, 146, 8, 0,
		1, 0, 3, 0, 149, 8, 0, 1, 0, 5, 0, 152, 8, 0, 10, 0, 12, 0, 155, 9, 0,
		1, 0, 5, 0, 158, 8, 0, 10, 0, 12, 0, 161, 9, 0, 1, 0, 1, 0, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 5, 2, 175, 8, 2, 10, 2,
		12, 2, 178, 9, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 5, 3,
		188, 8, 3, 10, 3, 12, 3, 191, 9, 3, 1, 3, 1, 3, 3, 3, 195, 8, 3, 1, 3,
		1, 3, 1, 4, 1, 4, 3, 4, 201, 8, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5,
		1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 3, 5, 214, 8, 5, 1, 6, 1, 6, 3, 6, 218, 8,
		6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 5,
		8, 231, 8, 8, 10, 8, 12, 8, 234, 9, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1,
		9, 1, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 3, 11,
		251, 8, 11, 1, 11, 3, 11, 254, 8, 11, 1, 11, 1, 11, 5, 11, 258, 8, 11,
		10, 11, 12, 11, 261, 9, 11, 1, 11, 5, 11, 264, 8, 11, 10, 11, 12, 11, 267,
		9, 11, 1, 11, 1, 11, 1, 11, 1, 12, 3, 12, 273, 8, 12, 1, 12, 3, 12, 276,
		8, 12, 1, 12, 3, 12, 279, 8, 12, 1, 12, 1, 12, 3, 12, 283, 8, 12, 1, 12,
		3, 12, 286, 8, 12, 1, 12, 3, 12, 289, 8, 12, 1, 12, 1, 12, 1, 13, 1, 13,
		1, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 15, 3, 15, 303, 8,
		15, 1, 15, 3, 15, 306, 8, 15, 1, 15, 1, 15, 1, 15, 3, 15, 311, 8, 15, 1,
		16, 1, 16, 3, 16, 315, 8, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 18,
		1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 3, 20, 331, 8,
		20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 5, 20, 338, 8, 20, 10, 20, 12, 20,
		341, 9, 20, 1, 20, 3, 20, 344, 8, 20, 1, 20, 5, 20, 347, 8, 20, 10, 20,
		12, 20, 350, 9, 20, 1, 20, 1, 20, 1, 20, 1, 21, 4, 21, 356, 8, 21, 11,
		21, 12, 21, 357, 1, 21, 3, 21, 361, 8, 21, 1, 21, 1, 21, 1, 22, 1, 22,
		1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 3, 23, 372, 8, 23, 1, 23, 1, 23, 1,
		24, 1, 24, 3, 24, 378, 8, 24, 1, 25, 1, 25, 1, 25, 3, 25, 383, 8, 25, 1,
		25, 3, 25, 386, 8, 25, 1, 25, 1, 25, 5, 25, 390, 8, 25, 10, 25, 12, 25,
		393, 9, 25, 1, 25, 5, 25, 396, 8, 25, 10, 25, 12, 25, 399, 9, 25, 1, 25,
		1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1,
		27, 1, 27, 5, 27, 414, 8, 27, 10, 27, 12, 27, 417, 9, 27, 1, 27, 3, 27,
		420, 8, 27, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 3, 28, 428, 8, 28,
		1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 5, 29, 437, 8, 29, 10,
		29, 12, 29, 440, 9, 29, 1, 29, 3, 29, 443, 8, 29, 1, 29, 1, 29, 1, 29,
		1, 30, 1, 30, 1, 30, 3, 30, 451, 8, 30, 1, 31, 1, 31, 1, 31, 3, 31, 456,
		8, 31, 1, 31, 1, 31, 3, 31, 460, 8, 31, 1, 31, 1, 31, 5, 31, 464, 8, 31,
		10, 31, 12, 31, 467, 9, 31, 1, 31, 3, 31, 470, 8, 31, 1, 31, 3, 31, 473,
		8, 31, 1, 31, 1, 31, 1, 31, 1, 32, 3, 32, 479, 8, 32, 1, 32, 1, 32, 1,
		32, 3, 32, 484, 8, 32, 1, 32, 1, 32, 1, 33, 1, 33, 1, 33, 1, 34, 1, 34,
		1, 34, 1, 35, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 1, 36, 4, 36, 501, 8,
		36, 11, 36, 12, 36, 502, 1, 36, 1, 36, 1, 36, 1, 37, 1, 37, 1, 37, 1, 37,
		1, 38, 1, 38, 1, 38, 1, 38, 5, 38, 516, 8, 38, 10, 38, 12, 38, 519, 9,
		38, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39,
		1, 40, 1, 40, 1, 40, 1, 40, 5, 40, 535, 8, 40, 10, 40, 12, 40, 538, 9,
		40, 1, 40, 1, 40, 1, 40, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 42, 3, 42,
		549, 8, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 43, 1, 43, 1, 43, 1,
		43, 1, 43, 1, 43, 1, 43, 1, 44, 1, 44, 1, 45, 1, 45, 1, 46, 1, 46, 1, 46,
		1, 46, 1, 46, 1, 46, 1, 47, 1, 47, 1, 47, 1, 47, 5, 47, 577, 8, 47, 10,
		47, 12, 47, 580, 9, 47, 1, 47, 1, 47, 1, 48, 1, 48, 1, 48, 1, 49, 1, 49,
		1, 49, 1, 49, 5, 49, 591, 8, 49, 10, 49, 12, 49, 594, 9, 49, 1, 49, 1,
		49, 1, 50, 1, 50, 1, 50, 1, 50, 5, 50, 602, 8, 50, 10, 50, 12, 50, 605,
		9, 50, 1, 50, 1, 50, 1, 51, 1, 51, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1,
		53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53,
		1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1,
		53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53,
		3, 53, 648, 8, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1,
		53, 1, 53, 1, 53, 3, 53, 660, 8, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53,
		1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1,
		53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53,
		1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1,
		53, 1, 53, 1, 53, 5, 53, 701, 8, 53, 10, 53, 12, 53, 704, 9, 53, 1, 54,
		1, 54, 1, 55, 1, 55, 1, 56, 1, 56, 1, 56, 3, 56, 713, 8, 56, 3, 56, 715,
		8, 56, 1, 57, 1, 57, 1, 57, 3, 57, 720, 8, 57, 1, 58, 1, 58, 1, 58, 1,
		58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 3, 58, 731, 8, 58, 1, 59, 1, 59,
		1, 59, 5, 59, 736, 8, 59, 10, 59, 12, 59, 739, 9, 59, 1, 60, 1, 60, 1,
		60, 1, 60, 5, 60, 745, 8, 60, 10, 60, 12, 60, 748, 9, 60, 1, 60, 1, 60,
		1, 61, 1, 61, 1, 61, 3, 61, 755, 8, 61, 1, 62, 1, 62, 1, 62, 1, 62, 1,
		63, 1, 63, 1, 64, 1, 64, 1, 65, 1, 65, 1, 65, 1, 65, 1, 66, 1, 66, 1, 67,
		1, 67, 1, 68, 1, 68, 1, 69, 1, 69, 1, 70, 1, 70, 1, 71, 1, 71, 1, 71, 0,
		1, 106, 72, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30,
		32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66,
		68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102,
		104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132,
		134, 136, 138, 140, 142, 0, 11, 2, 0, 66, 66, 78, 78, 4, 0, 3, 3, 19, 19,
		24, 24, 30, 30, 2, 0, 6, 6, 20, 21, 2, 0, 19, 19, 24, 24, 3, 0, 9, 10,
		13, 13, 18, 18, 2, 0, 8, 8, 22, 22, 1, 0, 103, 110, 2, 0, 54, 57, 81, 84,
		1, 0, 88, 96, 2, 0, 33, 33, 53, 53, 1, 0, 44, 46, 812, 0, 145, 1, 0, 0,
		0, 2, 164, 1, 0, 0, 0, 4, 170, 1, 0, 0, 0, 6, 181, 1, 0, 0, 0, 8, 200,
		1, 0, 0, 0, 10, 213, 1, 0, 0, 0, 12, 217, 1, 0, 0, 0, 14, 219, 1, 0, 0,
		0, 16, 226, 1, 0, 0, 0, 18, 238, 1, 0, 0, 0, 20, 242, 1, 0, 0, 0, 22, 247,
		1, 0, 0, 0, 24, 272, 1, 0, 0, 0, 26, 292, 1, 0, 0, 0, 28, 298, 1, 0, 0,
		0, 30, 302, 1, 0, 0, 0, 32, 312, 1, 0, 0, 0, 34, 318, 1, 0, 0, 0, 36, 321,
		1, 0, 0, 0, 38, 324, 1, 0, 0, 0, 40, 327, 1, 0, 0, 0, 42, 355, 1, 0, 0,
		0, 44, 364, 1, 0, 0, 0, 46, 368, 1, 0, 0, 0, 48, 375, 1, 0, 0, 0, 50, 379,
		1, 0, 0, 0, 52, 403, 1, 0, 0, 0, 54, 406, 1, 0, 0, 0, 56, 424, 1, 0, 0,
		0, 58, 429, 1, 0, 0, 0, 60, 447, 1, 0, 0, 0, 62, 452, 1, 0, 0, 0, 64, 478,
		1, 0, 0, 0, 66, 487, 1, 0, 0, 0, 68, 490, 1, 0, 0, 0, 70, 493, 1, 0, 0,
		0, 72, 496, 1, 0, 0, 0, 74, 507, 1, 0, 0, 0, 76, 511, 1, 0, 0, 0, 78, 523,
		1, 0, 0, 0, 80, 530, 1, 0, 0, 0, 82, 542, 1, 0, 0, 0, 84, 548, 1, 0, 0,
		0, 86, 555, 1, 0, 0, 0, 88, 562, 1, 0, 0, 0, 90, 564, 1, 0, 0, 0, 92, 566,
		1, 0, 0, 0, 94, 572, 1, 0, 0, 0, 96, 583, 1, 0, 0, 0, 98, 586, 1, 0, 0,
		0, 100, 597, 1, 0, 0, 0, 102, 608, 1, 0, 0, 0, 104, 610, 1, 0, 0, 0, 106,
		647, 1, 0, 0, 0, 108, 705, 1, 0, 0, 0, 110, 707, 1, 0, 0, 0, 112, 714,
		1, 0, 0, 0, 114, 716, 1, 0, 0, 0, 116, 730, 1, 0, 0, 0, 118, 732, 1, 0,
		0, 0, 120, 740, 1, 0, 0, 0, 122, 754, 1, 0, 0, 0, 124, 756, 1, 0, 0, 0,
		126, 760, 1, 0, 0, 0, 128, 762, 1, 0, 0, 0, 130, 764, 1, 0, 0, 0, 132,
		768, 1, 0, 0, 0, 134, 770, 1, 0, 0, 0, 136, 772, 1, 0, 0, 0, 138, 774,
		1, 0, 0, 0, 140, 776, 1, 0, 0, 0, 142, 778, 1, 0, 0, 0, 144, 146, 3, 2,
		1, 0, 145, 144, 1, 0, 0, 0, 145, 146, 1, 0, 0, 0, 146, 148, 1, 0, 0, 0,
		147, 149, 3, 4, 2, 0, 148, 147, 1, 0, 0, 0, 148, 149, 1, 0, 0, 0, 149,
		153, 1, 0, 0, 0, 150, 152, 3, 6, 3, 0, 151, 150, 1, 0, 0, 0, 152, 155,
		1, 0, 0, 0, 153, 151, 1, 0, 0, 0, 153, 154, 1, 0, 0, 0, 154, 159, 1, 0,
		0, 0, 155, 153, 1, 0, 0, 0, 156, 158, 3, 8, 4, 0, 157, 156, 1, 0, 0, 0,
		158, 161, 1, 0, 0, 0, 159, 157, 1, 0, 0, 0, 159, 160, 1, 0, 0, 0, 160,
		162, 1, 0, 0, 0, 161, 159, 1, 0, 0, 0, 162, 163, 5, 0, 0, 1, 163, 1, 1,
		0, 0, 0, 164, 165, 5, 97, 0, 0, 165, 166, 5, 16, 0, 0, 166, 167, 5, 104,
		0, 0, 167, 168, 5, 28, 0, 0, 168, 169, 5, 29, 0, 0, 169, 3, 1, 0, 0, 0,
		170, 171, 5, 63, 0, 0, 171, 176, 3, 110, 55, 0, 172, 173, 5, 7, 0, 0, 173,
		175, 3, 110, 55, 0, 174, 172, 1, 0, 0, 0, 175, 178, 1, 0, 0, 0, 176, 174,
		1, 0, 0, 0, 176, 177, 1, 0, 0, 0, 177, 179, 1, 0, 0, 0, 178, 176, 1, 0,
		0, 0, 179, 180, 5, 29, 0, 0, 180, 5, 1, 0, 0, 0, 181, 182, 5, 50, 0, 0,
		182, 183, 3, 110, 55, 0, 183, 189, 5, 7, 0, 0, 184, 185, 3, 110, 55, 0,
		185, 186, 5, 7, 0, 0, 186, 188, 1, 0, 0, 0, 187, 184, 1, 0, 0, 0, 188,
		191, 1, 0, 0, 0, 189, 187, 1, 0, 0, 0, 189, 190, 1, 0, 0, 0, 190, 194,
		1, 0, 0, 0, 191, 189, 1, 0, 0, 0, 192, 195, 3, 110, 55, 0, 193, 195, 5,
		21, 0, 0, 194, 192, 1, 0, 0, 0, 194, 193, 1, 0, 0, 0, 195, 196, 1, 0, 0,
		0, 196, 197, 5, 29, 0, 0, 197, 7, 1, 0, 0, 0, 198, 201, 3, 12, 6, 0, 199,
		201, 3, 10, 5, 0, 200, 198, 1, 0, 0, 0, 200, 199, 1, 0, 0, 0, 201, 9, 1,
		0, 0, 0, 202, 214, 3, 20, 10, 0, 203, 214, 3, 22, 11, 0, 204, 214, 3, 40,
		20, 0, 205, 214, 3, 50, 25, 0, 206, 214, 3, 54, 27, 0, 207, 214, 3, 58,
		29, 0, 208, 214, 3, 62, 31, 0, 209, 214, 3, 72, 36, 0, 210, 214, 3, 76,
		38, 0, 211, 214, 3, 80, 40, 0, 212, 214, 3, 104, 52, 0, 213, 202, 1, 0,
		0, 0, 213, 203, 1, 0, 0, 0, 213, 204, 1, 0, 0, 0, 213, 205, 1, 0, 0, 0,
		213, 206, 1, 0, 0, 0, 213, 207, 1, 0, 0, 0, 213, 208, 1, 0, 0, 0, 213,
		209, 1, 0, 0, 0, 213, 210, 1, 0, 0, 0, 213, 211, 1, 0, 0, 0, 213, 212,
		1, 0, 0, 0, 214, 11, 1, 0, 0, 0, 215, 218, 3, 14, 7, 0, 216, 218, 3, 16,
		8, 0, 217, 215, 1, 0, 0, 0, 217, 216, 1, 0, 0, 0, 218, 13, 1, 0, 0, 0,
		219, 220, 5, 39, 0, 0, 220, 221, 3, 114, 57, 0, 221, 222, 3, 110, 55, 0,
		222, 223, 5, 2, 0, 0, 223, 224, 3, 106, 53, 0, 224, 225, 5, 29, 0, 0, 225,
		15, 1, 0, 0, 0, 226, 227, 5, 69, 0, 0, 227, 228, 3, 110, 55, 0, 228, 232,
		5, 11, 0, 0, 229, 231, 3, 18, 9, 0, 230, 229, 1, 0, 0, 0, 231, 234, 1,
		0, 0, 0, 232, 230, 1, 0, 0, 0, 232, 233, 1, 0, 0, 0, 233, 235, 1, 0, 0,
		0, 234, 232, 1, 0, 0, 0, 235, 236, 5, 26, 0, 0, 236, 237, 5, 29, 0, 0,
		237, 17, 1, 0, 0, 0, 238, 239, 5, 68, 0, 0, 239, 240, 3, 106, 53, 0, 240,
		241, 5, 29, 0, 0, 241, 19, 1, 0, 0, 0, 242, 243, 5, 79, 0, 0, 243, 244,
		3, 112, 56, 0, 244, 245, 3, 110, 55, 0, 245, 246, 5, 29, 0, 0, 246, 21,
		1, 0, 0, 0, 247, 248, 5, 77, 0, 0, 248, 250, 3, 110, 55, 0, 249, 251, 3,
		98, 49, 0, 250, 249, 1, 0, 0, 0, 250, 251, 1, 0, 0, 0, 251, 253, 1, 0,
		0, 0, 252, 254, 3, 94, 47, 0, 253, 252, 1, 0, 0, 0, 253, 254, 1, 0, 0,
		0, 254, 255, 1, 0, 0, 0, 255, 259, 5, 11, 0, 0, 256, 258, 3, 24, 12, 0,
		257, 256, 1, 0, 0, 0, 258, 261, 1, 0, 0, 0, 259, 257, 1, 0, 0, 0, 259,
		260, 1, 0, 0, 0, 260, 265, 1, 0, 0, 0, 261, 259, 1, 0, 0, 0, 262, 264,
		3, 86, 43, 0, 263, 262, 1, 0, 0, 0, 264, 267, 1, 0, 0, 0, 265, 263, 1,
		0, 0, 0, 265, 266, 1, 0, 0, 0, 266, 268, 1, 0, 0, 0, 267, 265, 1, 0, 0,
		0, 268, 269, 5, 26, 0, 0, 269, 270, 5, 29, 0, 0, 270, 23, 1, 0, 0, 0, 271,
		273, 3, 26, 13, 0, 272, 271, 1, 0, 0, 0, 272, 273, 1, 0, 0, 0, 273, 275,
		1, 0, 0, 0, 274, 276, 3, 28, 14, 0, 275, 274, 1, 0, 0, 0, 275, 276, 1,
		0, 0, 0, 276, 278, 1, 0, 0, 0, 277, 279, 5, 62, 0, 0, 278, 277, 1, 0, 0,
		0, 278, 279, 1, 0, 0, 0, 279, 280, 1, 0, 0, 0, 280, 282, 3, 30, 15, 0,
		281, 283, 3, 34, 17, 0, 282, 281, 1, 0, 0, 0, 282, 283, 1, 0, 0, 0, 283,
		285, 1, 0, 0, 0, 284, 286, 3, 36, 18, 0, 285, 284, 1, 0, 0, 0, 285, 286,
		1, 0, 0, 0, 286, 288, 1, 0, 0, 0, 287, 289, 3, 38, 19, 0, 288, 287, 1,
		0, 0, 0, 288, 289, 1, 0, 0, 0, 289, 290, 1, 0, 0, 0, 290, 291, 5, 29, 0,
		0, 291, 25, 1, 0, 0, 0, 292, 293, 5, 32, 0, 0, 293, 294, 5, 16, 0, 0, 294,
		295, 3, 106, 53, 0, 295, 296, 5, 28, 0, 0, 296, 297, 5, 4, 0, 0, 297, 27,
		1, 0, 0, 0, 298, 299, 3, 106, 53, 0, 299, 300, 5, 4, 0, 0, 300, 29, 1,
		0, 0, 0, 301, 303, 5, 64, 0, 0, 302, 301, 1, 0, 0, 0, 302, 303, 1, 0, 0,
		0, 303, 305, 1, 0, 0, 0, 304, 306, 5, 49, 0, 0, 305, 304, 1, 0, 0, 0, 305,
		306, 1, 0, 0, 0, 306, 307, 1, 0, 0, 0, 307, 308, 3, 114, 57, 0, 308, 310,
		3, 110, 55, 0, 309, 311, 3, 32, 16, 0, 310, 309, 1, 0, 0, 0, 310, 311,
		1, 0, 0, 0, 311, 31, 1, 0, 0, 0, 312, 314, 5, 12, 0, 0, 313, 315, 3, 106,
		53, 0, 314, 313, 1, 0, 0, 0, 314, 315, 1, 0, 0, 0, 315, 316, 1, 0, 0, 0,
		316, 317, 5, 27, 0, 0, 317, 33, 1, 0, 0, 0, 318, 319, 5, 2, 0, 0, 319,
		320, 3, 106, 53, 0, 320, 35, 1, 0, 0, 0, 321, 322, 5, 48, 0, 0, 322, 323,
		3, 106, 53, 0, 323, 37, 1, 0, 0, 0, 324, 325, 5, 4, 0, 0, 325, 326, 3,
		106, 53, 0, 326, 39, 1, 0, 0, 0, 327, 328, 5, 38, 0, 0, 328, 330, 3, 110,
		55, 0, 329, 331, 3, 98, 49, 0, 330, 329, 1, 0, 0, 0, 330, 331, 1, 0, 0,
		0, 331, 332, 1, 0, 0, 0, 332, 333, 3, 94, 47, 0, 333, 334, 5, 61, 0, 0,
		334, 335, 3, 106, 53, 0, 335, 339, 5, 11, 0, 0, 336, 338, 3, 42, 21, 0,
		337, 336, 1, 0, 0, 0, 338, 341, 1, 0, 0, 0, 339, 337, 1, 0, 0, 0, 339,
		340, 1, 0, 0, 0, 340, 343, 1, 0, 0, 0, 341, 339, 1, 0, 0, 0, 342, 344,
		3, 46, 23, 0, 343, 342, 1, 0, 0, 0, 343, 344, 1, 0, 0, 0, 344, 348, 1,
		0, 0, 0, 345, 347, 3, 86, 43, 0, 346, 345, 1, 0, 0, 0, 347, 350, 1, 0,
		0, 0, 348, 346, 1, 0, 0, 0, 348, 349, 1, 0, 0, 0, 349, 351, 1, 0, 0, 0,
		350, 348, 1, 0, 0, 0, 351, 352, 5, 26, 0, 0, 352, 353, 5, 29, 0, 0, 353,
		41, 1, 0, 0, 0, 354, 356, 3, 44, 22, 0, 355, 354, 1, 0, 0, 0, 356, 357,
		1, 0, 0, 0, 357, 355, 1, 0, 0, 0, 357, 358, 1, 0, 0, 0, 358, 360, 1, 0,
		0, 0, 359, 361, 3, 48, 24, 0, 360, 359, 1, 0, 0, 0, 360, 361, 1, 0, 0,
		0, 361, 362, 1, 0, 0, 0, 362, 363, 5, 29, 0, 0, 363, 43, 1, 0, 0, 0, 364,
		365, 5, 37, 0, 0, 365, 366, 3, 106, 53, 0, 366, 367, 5, 4, 0, 0, 367, 45,
		1, 0, 0, 0, 368, 369, 5, 40, 0, 0, 369, 371, 5, 4, 0, 0, 370, 372, 3, 48,
		24, 0, 371, 370, 1, 0, 0, 0, 371, 372, 1, 0, 0, 0, 372, 373, 1, 0, 0, 0,
		373, 374, 5, 29, 0, 0, 374, 47, 1, 0, 0, 0, 375, 377, 3, 30, 15, 0, 376,
		378, 3, 38, 19, 0, 377, 376, 1, 0, 0, 0, 377, 378, 1, 0, 0, 0, 378, 49,
		1, 0, 0, 0, 379, 380, 5, 85, 0, 0, 380, 382, 3, 110, 55, 0, 381, 383, 3,
		98, 49, 0, 382, 381, 1, 0, 0, 0, 382, 383, 1, 0, 0, 0, 383, 385, 1, 0,
		0, 0, 384, 386, 3, 94, 47, 0, 385, 384, 1, 0, 0, 0, 385, 386, 1, 0, 0,
		0, 386, 387, 1, 0, 0, 0, 387, 391, 5, 11, 0, 0, 388, 390, 3, 52, 26, 0,
		389, 388, 1, 0, 0, 0, 390, 393, 1, 0, 0, 0, 391, 389, 1, 0, 0, 0, 391,
		392, 1, 0, 0, 0, 392, 397, 1, 0, 0, 0, 393, 391, 1, 0, 0, 0, 394, 396,
		3, 86, 43, 0, 395, 394, 1, 0, 0, 0, 396, 399, 1, 0, 0, 0, 397, 395, 1,
		0, 0, 0, 397, 398, 1, 0, 0, 0, 398, 400, 1, 0, 0, 0, 399, 397, 1, 0, 0,
		0, 400, 401, 5, 26, 0, 0, 401, 402, 5, 29, 0, 0, 402, 51, 1, 0, 0, 0, 403,
		404, 3, 48, 24, 0, 404, 405, 5, 29, 0, 0, 405, 53, 1, 0, 0, 0, 406, 407,
		5, 41, 0, 0, 407, 408, 3, 114, 57, 0, 408, 409, 3, 110, 55, 0, 409, 410,
		5, 11, 0, 0, 410, 415, 3, 56, 28, 0, 411, 412, 5, 5, 0, 0, 412, 414, 3,
		56, 28, 0, 413, 411, 1, 0, 0, 0, 414, 417, 1, 0, 0, 0, 415, 413, 1, 0,
		0, 0, 415, 416, 1, 0, 0, 0, 416, 419, 1, 0, 0, 0, 417, 415, 1, 0, 0, 0,
		418, 420, 5, 5, 0, 0, 419, 418, 1, 0, 0, 0, 419, 420, 1, 0, 0, 0, 420,
		421, 1, 0, 0, 0, 421, 422, 5, 26, 0, 0, 422, 423, 5, 29, 0, 0, 423, 55,
		1, 0, 0, 0, 424, 427, 3, 110, 55, 0, 425, 426, 5, 2, 0, 0, 426, 428, 3,
		106, 53, 0, 427, 425, 1, 0, 0, 0, 427, 428, 1, 0, 0, 0, 428, 57, 1, 0,
		0, 0, 429, 430, 5, 35, 0, 0, 430, 431, 3, 114, 57, 0, 431, 432, 3, 110,
		55, 0, 432, 433, 5, 11, 0, 0, 433, 438, 3, 60, 30, 0, 434, 435, 5, 5, 0,
		0, 435, 437, 3, 60, 30, 0, 436, 434, 1, 0, 0, 0, 437, 440, 1, 0, 0, 0,
		438, 436, 1, 0, 0, 0, 438, 439, 1, 0, 0, 0, 439, 442, 1, 0, 0, 0, 440,
		438, 1, 0, 0, 0, 441, 443, 5, 5, 0, 0, 442, 441, 1, 0, 0, 0, 442, 443,
		1, 0, 0, 0, 443, 444, 1, 0, 0, 0, 444, 445, 5, 26, 0, 0, 445, 446, 5, 29,
		0, 0, 446, 59, 1, 0, 0, 0, 447, 450, 3, 110, 55, 0, 448, 449, 5, 2, 0,
		0, 449, 451, 3, 106, 53, 0, 450, 448, 1, 0, 0, 0, 450, 451, 1, 0, 0, 0,
		451, 61, 1, 0, 0, 0, 452, 453, 5, 73, 0, 0, 453, 455, 3, 110, 55, 0, 454,
		456, 3, 98, 49, 0, 455, 454, 1, 0, 0, 0, 455, 456, 1, 0, 0, 0, 456, 459,
		1, 0, 0, 0, 457, 458, 5, 86, 0, 0, 458, 460, 3, 110, 55, 0, 459, 457, 1,
		0, 0, 0, 459, 460, 1, 0, 0, 0, 460, 461, 1, 0, 0, 0, 461, 465, 5, 11, 0,
		0, 462, 464, 3, 64, 32, 0, 463, 462, 1, 0, 0, 0, 464, 467, 1, 0, 0, 0,
		465, 463, 1, 0, 0, 0, 465, 466, 1, 0, 0, 0, 466, 469, 1, 0, 0, 0, 467,
		465, 1, 0, 0, 0, 468, 470, 3, 66, 33, 0, 469, 468, 1, 0, 0, 0, 469, 470,
		1, 0, 0, 0, 470, 472, 1, 0, 0, 0, 471, 473, 3, 70, 35, 0, 472, 471, 1,
		0, 0, 0, 472, 473, 1, 0, 0, 0, 473, 474, 1, 0, 0, 0, 474, 475, 5, 26, 0,
		0, 475, 476, 5, 29, 0, 0, 476, 63, 1, 0, 0, 0, 477, 479, 5, 74, 0, 0, 478,
		477, 1, 0, 0, 0, 478, 479, 1, 0, 0, 0, 479, 480, 1, 0, 0, 0, 480, 481,
		3, 114, 57, 0, 481, 483, 3, 110, 55, 0, 482, 484, 3, 68, 34, 0, 483, 482,
		1, 0, 0, 0, 483, 484, 1, 0, 0, 0, 484, 485, 1, 0, 0, 0, 485, 486, 5, 29,
		0, 0, 486, 65, 1, 0, 0, 0, 487, 488, 3, 68, 34, 0, 488, 489, 5, 29, 0,
		0, 489, 67, 1, 0, 0, 0, 490, 491, 5, 71, 0, 0, 491, 492, 3, 106, 53, 0,
		492, 69, 1, 0, 0, 0, 493, 494, 5, 75, 0, 0, 494, 495, 5, 29, 0, 0, 495,
		71, 1, 0, 0, 0, 496, 497, 5, 72, 0, 0, 497, 498, 3, 110, 55, 0, 498, 500,
		5, 11, 0, 0, 499, 501, 3, 74, 37, 0, 500, 499, 1, 0, 0, 0, 501, 502, 1,
		0, 0, 0, 502, 500, 1, 0, 0, 0, 502, 503, 1, 0, 0, 0, 503, 504, 1, 0, 0,
		0, 504, 505, 5, 26, 0, 0, 505, 506, 5, 29, 0, 0, 506, 73, 1, 0, 0, 0, 507,
		508, 3, 114, 57, 0, 508, 509, 3, 110, 55, 0, 509, 510, 5, 29, 0, 0, 510,
		75, 1, 0, 0, 0, 511, 512, 5, 70, 0, 0, 512, 513, 3, 110, 55, 0, 513, 517,
		5, 11, 0, 0, 514, 516, 3, 78, 39, 0, 515, 514, 1, 0, 0, 0, 516, 519, 1,
		0, 0, 0, 517, 515, 1, 0, 0, 0, 517, 518, 1, 0, 0, 0, 518, 520, 1, 0, 0,
		0, 519, 517, 1, 0, 0, 0, 520, 521, 5, 26, 0, 0, 521, 522, 5, 29, 0, 0,
		522, 77, 1, 0, 0, 0, 523, 524, 3, 112, 56, 0, 524, 525, 3, 110, 55, 0,
		525, 526, 5, 16, 0, 0, 526, 527, 3, 112, 56, 0, 527, 528, 5, 28, 0, 0,
		528, 529, 5, 29, 0, 0, 529, 79, 1, 0, 0, 0, 530, 531, 5, 65, 0, 0, 531,
		532, 3, 110, 55, 0, 532, 536, 5, 11, 0, 0, 533, 535, 3, 82, 41, 0, 534,
		533, 1, 0, 0, 0, 535, 538, 1, 0, 0, 0, 536, 534, 1, 0, 0, 0, 536, 537,
		1, 0, 0, 0, 537, 539, 1, 0, 0, 0, 538, 536, 1, 0, 0, 0, 539, 540, 5, 26,
		0, 0, 540, 541, 5, 29, 0, 0, 541, 81, 1, 0, 0, 0, 542, 543, 3, 84, 42,
		0, 543, 544, 3, 112, 56, 0, 544, 545, 3, 110, 55, 0, 545, 546, 5, 29, 0,
		0, 546, 83, 1, 0, 0, 0, 547, 549, 7, 0, 0, 0, 548, 547, 1, 0, 0, 0, 548,
		549, 1, 0, 0, 0, 549, 550, 1, 0, 0, 0, 550, 551, 5, 80, 0, 0, 551, 552,
		5, 16, 0, 0, 552, 553, 3, 106, 53, 0, 553, 554, 5, 28, 0, 0, 554, 85, 1,
		0, 0, 0, 555, 556, 5, 47, 0, 0, 556, 557, 3, 88, 44, 0, 557, 558, 3, 90,
		45, 0, 558, 559, 5, 16, 0, 0, 559, 560, 5, 28, 0, 0, 560, 561, 3, 92, 46,
		0, 561, 87, 1, 0, 0, 0, 562, 563, 3, 112, 56, 0, 563, 89, 1, 0, 0, 0, 564,
		565, 3, 110, 55, 0, 565, 91, 1, 0, 0, 0, 566, 567, 5, 11, 0, 0, 567, 568,
		5, 67, 0, 0, 568, 569, 3, 106, 53, 0, 569, 570, 5, 29, 0, 0, 570, 571,
		5, 26, 0, 0, 571, 93, 1, 0, 0, 0, 572, 573, 5, 16, 0, 0, 573, 578, 3, 96,
		48, 0, 574, 575, 5, 5, 0, 0, 575, 577, 3, 96, 48, 0, 576, 574, 1, 0, 0,
		0, 577, 580, 1, 0, 0, 0, 578, 576, 1, 0, 0, 0, 578, 579, 1, 0, 0, 0, 579,
		581, 1, 0, 0, 0, 580, 578, 1, 0, 0, 0, 581, 582, 5, 28, 0, 0, 582, 95,
		1, 0, 0, 0, 583, 584, 3, 112, 56, 0, 584, 585, 3, 110, 55, 0, 585, 97,
		1, 0, 0, 0, 586, 587, 5, 18, 0, 0, 587, 592, 3, 110, 55, 0, 588, 589, 5,
		5, 0, 0, 589, 591, 3, 110, 55, 0, 590, 588, 1, 0, 0, 0, 591, 594, 1, 0,
		0, 0, 592, 590, 1, 0, 0, 0, 592, 593, 1, 0, 0, 0, 593, 595, 1, 0, 0, 0,
		594, 592, 1, 0, 0, 0, 595, 596, 5, 10, 0, 0, 596, 99, 1, 0, 0, 0, 597,
		598, 5, 18, 0, 0, 598, 603, 3, 102, 51, 0, 599, 600, 5, 5, 0, 0, 600, 602,
		3, 102, 51, 0, 601, 599, 1, 0, 0, 0, 602, 605, 1, 0, 0, 0, 603, 601, 1,
		0, 0, 0, 603, 604, 1, 0, 0, 0, 604, 606, 1, 0, 0, 0, 605, 603, 1, 0, 0,
		0, 606, 607, 5, 10, 0, 0, 607, 101, 1, 0, 0, 0, 608, 609, 3, 112, 56, 0,
		609, 103, 1, 0, 0, 0, 610, 611, 5, 52, 0, 0, 611, 612, 3, 112, 56, 0, 612,
		613, 3, 110, 55, 0, 613, 614, 5, 29, 0, 0, 614, 105, 1, 0, 0, 0, 615, 616,
		6, 53, -1, 0, 616, 617, 5, 16, 0, 0, 617, 618, 3, 106, 53, 0, 618, 619,
		5, 28, 0, 0, 619, 648, 1, 0, 0, 0, 620, 621, 5, 58, 0, 0, 621, 622, 5,
		16, 0, 0, 622, 623, 3, 106, 53, 0, 623, 624, 5, 5, 0, 0, 624, 625, 3, 106,
		53, 0, 625, 626, 5, 28, 0, 0, 626, 648, 1, 0, 0, 0, 627, 628, 5, 59, 0,
		0, 628, 629, 5, 16, 0, 0, 629, 630, 3, 106, 53, 0, 630, 631, 5, 28, 0,
		0, 631, 648, 1, 0, 0, 0, 632, 633, 5, 87, 0, 0, 633, 634, 5, 16, 0, 0,
		634, 635, 3, 106, 53, 0, 635, 636, 5, 28, 0, 0, 636, 648, 1, 0, 0, 0, 637,
		638, 5, 60, 0, 0, 638, 639, 5, 16, 0, 0, 639, 640, 3, 106, 53, 0, 640,
		641, 5, 28, 0, 0, 641, 648, 1, 0, 0, 0, 642, 643, 7, 1, 0, 0, 643, 648,
		3, 106, 53, 15, 644, 648, 3, 108, 54, 0, 645, 648, 5, 51, 0, 0, 646, 648,
		3, 110, 55, 0, 647, 615, 1, 0, 0, 0, 647, 620, 1, 0, 0, 0, 647, 627, 1,
		0, 0, 0, 647, 632, 1, 0, 0, 0, 647, 637, 1, 0, 0, 0, 647, 642, 1, 0, 0,
		0, 647, 644, 1, 0, 0, 0, 647, 645, 1, 0, 0, 0, 647, 646, 1, 0, 0, 0, 648,
		702, 1, 0, 0, 0, 649, 650, 10, 14, 0, 0, 650, 651, 7, 2, 0, 0, 651, 701,
		3, 106, 53, 15, 652, 653, 10, 13, 0, 0, 653, 654, 7, 3, 0, 0, 654, 701,
		3, 106, 53, 14, 655, 659, 10, 12, 0, 0, 656, 660, 5, 17, 0, 0, 657, 658,
		5, 10, 0, 0, 658, 660, 5, 10, 0, 0, 659, 656, 1, 0, 0, 0, 659, 657, 1,
		0, 0, 0, 660, 661, 1, 0, 0, 0, 661, 701, 3, 106, 53, 13, 662, 663, 10,
		11, 0, 0, 663, 664, 7, 4, 0, 0, 664, 701, 3, 106, 53, 12, 665, 666, 10,
		10, 0, 0, 666, 667, 7, 5, 0, 0, 667, 701, 3, 106, 53, 11, 668, 669, 10,
		9, 0, 0, 669, 670, 5, 1, 0, 0, 670, 701, 3, 106, 53, 10, 671, 672, 10,
		8, 0, 0, 672, 673, 5, 31, 0, 0, 673, 701, 3, 106, 53, 9, 674, 675, 10,
		7, 0, 0, 675, 676, 5, 23, 0, 0, 676, 701, 3, 106, 53, 8, 677, 678, 10,
		6, 0, 0, 678, 679, 5, 14, 0, 0, 679, 701, 3, 106, 53, 7, 680, 681, 10,
		5, 0, 0, 681, 682, 5, 15, 0, 0, 682, 701, 3, 106, 53, 6, 683, 684, 10,
		4, 0, 0, 684, 685, 5, 25, 0, 0, 685, 686, 3, 106, 53, 0, 686, 687, 5, 4,
		0, 0, 687, 688, 3, 106, 53, 4, 688, 701, 1, 0, 0, 0, 689, 690, 10, 22,
		0, 0, 690, 691, 5, 16, 0, 0, 691, 701, 5, 28, 0, 0, 692, 693, 10, 21, 0,
		0, 693, 694, 5, 12, 0, 0, 694, 695, 3, 106, 53, 0, 695, 696, 5, 27, 0,
		0, 696, 701, 1, 0, 0, 0, 697, 698, 10, 20, 0, 0, 698, 699, 5, 7, 0, 0,
		699, 701, 3, 110, 55, 0, 700, 649, 1, 0, 0, 0, 700, 652, 1, 0, 0, 0, 700,
		655, 1, 0, 0, 0, 700, 662, 1, 0, 0, 0, 700, 665, 1, 0, 0, 0, 700, 668,
		1, 0, 0, 0, 700, 671, 1, 0, 0, 0, 700, 674, 1, 0, 0, 0, 700, 677, 1, 0,
		0, 0, 700, 680, 1, 0, 0, 0, 700, 683, 1, 0, 0, 0, 700, 689, 1, 0, 0, 0,
		700, 692, 1, 0, 0, 0, 700, 697, 1, 0, 0, 0, 701, 704, 1, 0, 0, 0, 702,
		700, 1, 0, 0, 0, 702, 703, 1, 0, 0, 0, 703, 107, 1, 0, 0, 0, 704, 702,
		1, 0, 0, 0, 705, 706, 7, 6, 0, 0, 706, 109, 1, 0, 0, 0, 707, 708, 5, 111,
		0, 0, 708, 111, 1, 0, 0, 0, 709, 715, 3, 116, 58, 0, 710, 712, 3, 118,
		59, 0, 711, 713, 3, 100, 50, 0, 712, 711, 1, 0, 0, 0, 712, 713, 1, 0, 0,
		0, 713, 715, 1, 0, 0, 0, 714, 709, 1, 0, 0, 0, 714, 710, 1, 0, 0, 0, 715,
		113, 1, 0, 0, 0, 716, 719, 3, 112, 56, 0, 717, 720, 3, 120, 60, 0, 718,
		720, 3, 124, 62, 0, 719, 717, 1, 0, 0, 0, 719, 718, 1, 0, 0, 0, 719, 720,
		1, 0, 0, 0, 720, 115, 1, 0, 0, 0, 721, 731, 3, 126, 63, 0, 722, 731, 3,
		128, 64, 0, 723, 731, 3, 130, 65, 0, 724, 731, 3, 132, 66, 0, 725, 731,
		3, 134, 67, 0, 726, 731, 3, 136, 68, 0, 727, 731, 3, 138, 69, 0, 728, 731,
		3, 140, 70, 0, 729, 731, 3, 142, 71, 0, 730, 721, 1, 0, 0, 0, 730, 722,
		1, 0, 0, 0, 730, 723, 1, 0, 0, 0, 730, 724, 1, 0, 0, 0, 730, 725, 1, 0,
		0, 0, 730, 726, 1, 0, 0, 0, 730, 727, 1, 0, 0, 0, 730, 728, 1, 0, 0, 0,
		730, 729, 1, 0, 0, 0, 731, 117, 1, 0, 0, 0, 732, 737, 3, 110, 55, 0, 733,
		734, 5, 7, 0, 0, 734, 736, 3, 110, 55, 0, 735, 733, 1, 0, 0, 0, 736, 739,
		1, 0, 0, 0, 737, 735, 1, 0, 0, 0, 737, 738, 1, 0, 0, 0, 738, 119, 1, 0,
		0, 0, 739, 737, 1, 0, 0, 0, 740, 741, 5, 16, 0, 0, 741, 746, 3, 122, 61,
		0, 742, 743, 5, 5, 0, 0, 743, 745, 3, 122, 61, 0, 744, 742, 1, 0, 0, 0,
		745, 748, 1, 0, 0, 0, 746, 744, 1, 0, 0, 0, 746, 747, 1, 0, 0, 0, 747,
		749, 1, 0, 0, 0, 748, 746, 1, 0, 0, 0, 749, 750, 5, 28, 0, 0, 750, 121,
		1, 0, 0, 0, 751, 752, 5, 42, 0, 0, 752, 755, 3, 110, 55, 0, 753, 755, 3,
		106, 53, 0, 754, 751, 1, 0, 0, 0, 754, 753, 1, 0, 0, 0, 755, 123, 1, 0,
		0, 0, 756, 757, 5, 18, 0, 0, 757, 758, 3, 106, 53, 0, 758, 759, 5, 10,
		0, 0, 759, 125, 1, 0, 0, 0, 760, 761, 7, 7, 0, 0, 761, 127, 1, 0, 0, 0,
		762, 763, 7, 8, 0, 0, 763, 129, 1, 0, 0, 0, 764, 765, 7, 9, 0, 0, 765,
		766, 5, 4, 0, 0, 766, 767, 5, 110, 0, 0, 767, 131, 1, 0, 0, 0, 768, 769,
		7, 9, 0, 0, 769, 133, 1, 0, 0, 0, 770, 771, 5, 34, 0, 0, 771, 135, 1, 0,
		0, 0, 772, 773, 5, 76, 0, 0, 773, 137, 1, 0, 0, 0, 774, 775, 7, 10, 0,
		0, 775, 139, 1, 0, 0, 0, 776, 777, 5, 43, 0, 0, 777, 141, 1, 0, 0, 0, 778,
		779, 5, 36, 0, 0, 779, 143, 1, 0, 0, 0, 68, 145, 148, 153, 159, 176, 189,
		194, 200, 213, 217, 232, 250, 253, 259, 265, 272, 275, 278, 282, 285, 288,
		302, 305, 310, 314, 330, 339, 343, 348, 357, 360, 371, 377, 382, 385, 391,
		397, 415, 419, 427, 438, 442, 450, 455, 459, 465, 469, 472, 478, 483, 502,
		517, 536, 548, 578, 592, 603, 647, 659, 700, 702, 712, 714, 719, 730, 737,
		746, 754,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// ZserioParserInit initializes any static state used to implement ZserioParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewZserioParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func ZserioParserInit() {
	staticData := &ZserioParserParserStaticData
	staticData.once.Do(zserioparserParserInit)
}

// NewZserioParser produces a new parser instance for the optional input antlr.TokenStream.
func NewZserioParser(input antlr.TokenStream) *ZserioParser {
	ZserioParserInit()
	this := new(ZserioParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &ZserioParserParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "ZserioParser.g4"

	return this
}

// ZserioParser tokens.
const (
	ZserioParserEOF                    = antlr.TokenEOF
	ZserioParserAND                    = 1
	ZserioParserASSIGN                 = 2
	ZserioParserBANG                   = 3
	ZserioParserCOLON                  = 4
	ZserioParserCOMMA                  = 5
	ZserioParserDIVIDE                 = 6
	ZserioParserDOT                    = 7
	ZserioParserEQ                     = 8
	ZserioParserGE                     = 9
	ZserioParserGT                     = 10
	ZserioParserLBRACE                 = 11
	ZserioParserLBRACKET               = 12
	ZserioParserLE                     = 13
	ZserioParserLOGICAL_AND            = 14
	ZserioParserLOGICAL_OR             = 15
	ZserioParserLPAREN                 = 16
	ZserioParserLSHIFT                 = 17
	ZserioParserLT                     = 18
	ZserioParserMINUS                  = 19
	ZserioParserMODULO                 = 20
	ZserioParserMULTIPLY               = 21
	ZserioParserNE                     = 22
	ZserioParserOR                     = 23
	ZserioParserPLUS                   = 24
	ZserioParserQUESTIONMARK           = 25
	ZserioParserRBRACE                 = 26
	ZserioParserRBRACKET               = 27
	ZserioParserRPAREN                 = 28
	ZserioParserSEMICOLON              = 29
	ZserioParserTILDE                  = 30
	ZserioParserXOR                    = 31
	ZserioParserALIGN                  = 32
	ZserioParserBIT_FIELD              = 33
	ZserioParserBOOL                   = 34
	ZserioParserBITMASK                = 35
	ZserioParserBYTES                  = 36
	ZserioParserCASE                   = 37
	ZserioParserCHOICE                 = 38
	ZserioParserCONST                  = 39
	ZserioParserDEFAULT                = 40
	ZserioParserENUM                   = 41
	ZserioParserEXPLICIT               = 42
	ZserioParserEXTERN                 = 43
	ZserioParserFLOAT16                = 44
	ZserioParserFLOAT32                = 45
	ZserioParserFLOAT64                = 46
	ZserioParserFUNCTION               = 47
	ZserioParserIF                     = 48
	ZserioParserIMPLICIT               = 49
	ZserioParserIMPORT                 = 50
	ZserioParserINDEX                  = 51
	ZserioParserINSTANTIATE            = 52
	ZserioParserINT_FIELD              = 53
	ZserioParserINT16                  = 54
	ZserioParserINT32                  = 55
	ZserioParserINT64                  = 56
	ZserioParserINT8                   = 57
	ZserioParserISSET                  = 58
	ZserioParserLENGTHOF               = 59
	ZserioParserNUMBITS                = 60
	ZserioParserON                     = 61
	ZserioParserOPTIONAL               = 62
	ZserioParserPACKAGE                = 63
	ZserioParserPACKED                 = 64
	ZserioParserPUBSUB                 = 65
	ZserioParserPUBLISH                = 66
	ZserioParserRETURN                 = 67
	ZserioParserRULE                   = 68
	ZserioParserRULE_GROUP             = 69
	ZserioParserSERVICE                = 70
	ZserioParserSQL                    = 71
	ZserioParserSQL_DATABASE           = 72
	ZserioParserSQL_TABLE              = 73
	ZserioParserSQL_VIRTUAL            = 74
	ZserioParserSQL_WITHOUT_ROWID      = 75
	ZserioParserSTRING                 = 76
	ZserioParserSTRUCTURE              = 77
	ZserioParserSUBSCRIBE              = 78
	ZserioParserSUBTYPE                = 79
	ZserioParserTOPIC                  = 80
	ZserioParserUINT16                 = 81
	ZserioParserUINT32                 = 82
	ZserioParserUINT64                 = 83
	ZserioParserUINT8                  = 84
	ZserioParserUNION                  = 85
	ZserioParserUSING                  = 86
	ZserioParserVALUEOF                = 87
	ZserioParserVARINT                 = 88
	ZserioParserVARINT16               = 89
	ZserioParserVARINT32               = 90
	ZserioParserVARINT64               = 91
	ZserioParserVARSIZE                = 92
	ZserioParserVARUINT                = 93
	ZserioParserVARUINT16              = 94
	ZserioParserVARUINT32              = 95
	ZserioParserVARUINT64              = 96
	ZserioParserCOMPAT_VERSION         = 97
	ZserioParserWS                     = 98
	ZserioParserDOC_COMMENT            = 99
	ZserioParserMARKDOWN_COMMENT       = 100
	ZserioParserBLOCK_COMMENT          = 101
	ZserioParserLINE_COMMENT           = 102
	ZserioParserBOOL_LITERAL           = 103
	ZserioParserSTRING_LITERAL         = 104
	ZserioParserBINARY_LITERAL         = 105
	ZserioParserOCTAL_LITERAL          = 106
	ZserioParserHEXADECIMAL_LITERAL    = 107
	ZserioParserDOUBLE_LITERAL         = 108
	ZserioParserFLOAT_LITERAL          = 109
	ZserioParserDECIMAL_LITERAL        = 110
	ZserioParserID                     = 111
	ZserioParserINVALID_STRING_LITERAL = 112
	ZserioParserINVALID_TOKEN          = 113
	ZserioParserRSHIFT                 = 114
)

// ZserioParser rules.
const (
	ZserioParserRULE_packageDeclaration            = 0
	ZserioParserRULE_compatibilityVersionDirective = 1
	ZserioParserRULE_packageNameDefinition         = 2
	ZserioParserRULE_importDeclaration             = 3
	ZserioParserRULE_languageDirective             = 4
	ZserioParserRULE_typeDeclaration               = 5
	ZserioParserRULE_symbolDefinition              = 6
	ZserioParserRULE_constDefinition               = 7
	ZserioParserRULE_ruleGroupDefinition           = 8
	ZserioParserRULE_ruleDefinition                = 9
	ZserioParserRULE_subtypeDeclaration            = 10
	ZserioParserRULE_structureDeclaration          = 11
	ZserioParserRULE_structureFieldDefinition      = 12
	ZserioParserRULE_fieldAlignment                = 13
	ZserioParserRULE_fieldOffset                   = 14
	ZserioParserRULE_fieldTypeId                   = 15
	ZserioParserRULE_fieldArrayRange               = 16
	ZserioParserRULE_fieldInitializer              = 17
	ZserioParserRULE_fieldOptionalClause           = 18
	ZserioParserRULE_fieldConstraint               = 19
	ZserioParserRULE_choiceDeclaration             = 20
	ZserioParserRULE_choiceCases                   = 21
	ZserioParserRULE_choiceCase                    = 22
	ZserioParserRULE_choiceDefault                 = 23
	ZserioParserRULE_choiceFieldDefinition         = 24
	ZserioParserRULE_unionDeclaration              = 25
	ZserioParserRULE_unionFieldDefinition          = 26
	ZserioParserRULE_enumDeclaration               = 27
	ZserioParserRULE_enumItem                      = 28
	ZserioParserRULE_bitmaskDeclaration            = 29
	ZserioParserRULE_bitmaskValue                  = 30
	ZserioParserRULE_sqlTableDeclaration           = 31
	ZserioParserRULE_sqlTableFieldDefinition       = 32
	ZserioParserRULE_sqlConstraintDefinition       = 33
	ZserioParserRULE_sqlConstraint                 = 34
	ZserioParserRULE_sqlWithoutRowId               = 35
	ZserioParserRULE_sqlDatabaseDefinition         = 36
	ZserioParserRULE_sqlDatabaseFieldDefinition    = 37
	ZserioParserRULE_serviceDefinition             = 38
	ZserioParserRULE_serviceMethodDefinition       = 39
	ZserioParserRULE_pubsubDefinition              = 40
	ZserioParserRULE_pubsubMessageDefinition       = 41
	ZserioParserRULE_topicDefinition               = 42
	ZserioParserRULE_functionDefinition            = 43
	ZserioParserRULE_functionType                  = 44
	ZserioParserRULE_functionName                  = 45
	ZserioParserRULE_functionBody                  = 46
	ZserioParserRULE_typeParameters                = 47
	ZserioParserRULE_parameterDefinition           = 48
	ZserioParserRULE_templateParameters            = 49
	ZserioParserRULE_templateArguments             = 50
	ZserioParserRULE_templateArgument              = 51
	ZserioParserRULE_instantiateDeclaration        = 52
	ZserioParserRULE_expression                    = 53
	ZserioParserRULE_literal                       = 54
	ZserioParserRULE_id                            = 55
	ZserioParserRULE_typeReference                 = 56
	ZserioParserRULE_typeInstantiation             = 57
	ZserioParserRULE_builtinType                   = 58
	ZserioParserRULE_qualifiedName                 = 59
	ZserioParserRULE_typeArguments                 = 60
	ZserioParserRULE_typeArgument                  = 61
	ZserioParserRULE_dynamicLengthArgument         = 62
	ZserioParserRULE_intType                       = 63
	ZserioParserRULE_varintType                    = 64
	ZserioParserRULE_fixedBitFieldType             = 65
	ZserioParserRULE_dynamicBitFieldType           = 66
	ZserioParserRULE_boolType                      = 67
	ZserioParserRULE_stringType                    = 68
	ZserioParserRULE_floatType                     = 69
	ZserioParserRULE_externType                    = 70
	ZserioParserRULE_bytesType                     = 71
)

// IPackageDeclarationContext is an interface to support dynamic dispatch.
type IPackageDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EOF() antlr.TerminalNode
	CompatibilityVersionDirective() ICompatibilityVersionDirectiveContext
	PackageNameDefinition() IPackageNameDefinitionContext
	AllImportDeclaration() []IImportDeclarationContext
	ImportDeclaration(i int) IImportDeclarationContext
	AllLanguageDirective() []ILanguageDirectiveContext
	LanguageDirective(i int) ILanguageDirectiveContext

	// IsPackageDeclarationContext differentiates from other interfaces.
	IsPackageDeclarationContext()
}

type PackageDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageDeclarationContext() *PackageDeclarationContext {
	var p = new(PackageDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_packageDeclaration
	return p
}

func InitEmptyPackageDeclarationContext(p *PackageDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_packageDeclaration
}

func (*PackageDeclarationContext) IsPackageDeclarationContext() {}

func NewPackageDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageDeclarationContext {
	var p = new(PackageDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_packageDeclaration

	return p
}

func (s *PackageDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageDeclarationContext) EOF() antlr.TerminalNode {
	return s.GetToken(ZserioParserEOF, 0)
}

func (s *PackageDeclarationContext) CompatibilityVersionDirective() ICompatibilityVersionDirectiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompatibilityVersionDirectiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompatibilityVersionDirectiveContext)
}

func (s *PackageDeclarationContext) PackageNameDefinition() IPackageNameDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPackageNameDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPackageNameDefinitionContext)
}

func (s *PackageDeclarationContext) AllImportDeclaration() []IImportDeclarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IImportDeclarationContext); ok {
			len++
		}
	}

	tst := make([]IImportDeclarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IImportDeclarationContext); ok {
			tst[i] = t.(IImportDeclarationContext)
			i++
		}
	}

	return tst
}

func (s *PackageDeclarationContext) ImportDeclaration(i int) IImportDeclarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImportDeclarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImportDeclarationContext)
}

func (s *PackageDeclarationContext) AllLanguageDirective() []ILanguageDirectiveContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILanguageDirectiveContext); ok {
			len++
		}
	}

	tst := make([]ILanguageDirectiveContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILanguageDirectiveContext); ok {
			tst[i] = t.(ILanguageDirectiveContext)
			i++
		}
	}

	return tst
}

func (s *PackageDeclarationContext) LanguageDirective(i int) ILanguageDirectiveContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILanguageDirectiveContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILanguageDirectiveContext)
}

func (s *PackageDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitPackageDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) PackageDeclaration() (localctx IPackageDeclarationContext) {
	localctx = NewPackageDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, ZserioParserRULE_packageDeclaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(145)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserCOMPAT_VERSION {
		{
			p.SetState(144)
			p.CompatibilityVersionDirective()
		}

	}
	p.SetState(148)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserPACKAGE {
		{
			p.SetState(147)
			p.PackageNameDefinition()
		}

	}
	p.SetState(153)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ZserioParserIMPORT {
		{
			p.SetState(150)
			p.ImportDeclaration()
		}

		p.SetState(155)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(159)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-35)) & ^0x3f) == 0 && ((int64(1)<<(_la-35))&1148355069739097) != 0 {
		{
			p.SetState(156)
			p.LanguageDirective()
		}

		p.SetState(161)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(162)
		p.Match(ZserioParserEOF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICompatibilityVersionDirectiveContext is an interface to support dynamic dispatch.
type ICompatibilityVersionDirectiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COMPAT_VERSION() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	STRING_LITERAL() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode

	// IsCompatibilityVersionDirectiveContext differentiates from other interfaces.
	IsCompatibilityVersionDirectiveContext()
}

type CompatibilityVersionDirectiveContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompatibilityVersionDirectiveContext() *CompatibilityVersionDirectiveContext {
	var p = new(CompatibilityVersionDirectiveContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_compatibilityVersionDirective
	return p
}

func InitEmptyCompatibilityVersionDirectiveContext(p *CompatibilityVersionDirectiveContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_compatibilityVersionDirective
}

func (*CompatibilityVersionDirectiveContext) IsCompatibilityVersionDirectiveContext() {}

func NewCompatibilityVersionDirectiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CompatibilityVersionDirectiveContext {
	var p = new(CompatibilityVersionDirectiveContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_compatibilityVersionDirective

	return p
}

func (s *CompatibilityVersionDirectiveContext) GetParser() antlr.Parser { return s.parser }

func (s *CompatibilityVersionDirectiveContext) COMPAT_VERSION() antlr.TerminalNode {
	return s.GetToken(ZserioParserCOMPAT_VERSION, 0)
}

func (s *CompatibilityVersionDirectiveContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserLPAREN, 0)
}

func (s *CompatibilityVersionDirectiveContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ZserioParserSTRING_LITERAL, 0)
}

func (s *CompatibilityVersionDirectiveContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserRPAREN, 0)
}

func (s *CompatibilityVersionDirectiveContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *CompatibilityVersionDirectiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CompatibilityVersionDirectiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CompatibilityVersionDirectiveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitCompatibilityVersionDirective(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) CompatibilityVersionDirective() (localctx ICompatibilityVersionDirectiveContext) {
	localctx = NewCompatibilityVersionDirectiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, ZserioParserRULE_compatibilityVersionDirective)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(164)
		p.Match(ZserioParserCOMPAT_VERSION)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(165)
		p.Match(ZserioParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(166)
		p.Match(ZserioParserSTRING_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(167)
		p.Match(ZserioParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(168)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPackageNameDefinitionContext is an interface to support dynamic dispatch.
type IPackageNameDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PACKAGE() antlr.TerminalNode
	AllId() []IIdContext
	Id(i int) IIdContext
	SEMICOLON() antlr.TerminalNode
	AllDOT() []antlr.TerminalNode
	DOT(i int) antlr.TerminalNode

	// IsPackageNameDefinitionContext differentiates from other interfaces.
	IsPackageNameDefinitionContext()
}

type PackageNameDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageNameDefinitionContext() *PackageNameDefinitionContext {
	var p = new(PackageNameDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_packageNameDefinition
	return p
}

func InitEmptyPackageNameDefinitionContext(p *PackageNameDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_packageNameDefinition
}

func (*PackageNameDefinitionContext) IsPackageNameDefinitionContext() {}

func NewPackageNameDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageNameDefinitionContext {
	var p = new(PackageNameDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_packageNameDefinition

	return p
}

func (s *PackageNameDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageNameDefinitionContext) PACKAGE() antlr.TerminalNode {
	return s.GetToken(ZserioParserPACKAGE, 0)
}

func (s *PackageNameDefinitionContext) AllId() []IIdContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdContext); ok {
			len++
		}
	}

	tst := make([]IIdContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdContext); ok {
			tst[i] = t.(IIdContext)
			i++
		}
	}

	return tst
}

func (s *PackageNameDefinitionContext) Id(i int) IIdContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PackageNameDefinitionContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *PackageNameDefinitionContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(ZserioParserDOT)
}

func (s *PackageNameDefinitionContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(ZserioParserDOT, i)
}

func (s *PackageNameDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageNameDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageNameDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitPackageNameDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) PackageNameDefinition() (localctx IPackageNameDefinitionContext) {
	localctx = NewPackageNameDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, ZserioParserRULE_packageNameDefinition)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(170)
		p.Match(ZserioParserPACKAGE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(171)
		p.Id()
	}
	p.SetState(176)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ZserioParserDOT {
		{
			p.SetState(172)
			p.Match(ZserioParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(173)
			p.Id()
		}

		p.SetState(178)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(179)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IImportDeclarationContext is an interface to support dynamic dispatch.
type IImportDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IMPORT() antlr.TerminalNode
	AllId() []IIdContext
	Id(i int) IIdContext
	AllDOT() []antlr.TerminalNode
	DOT(i int) antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode
	MULTIPLY() antlr.TerminalNode

	// IsImportDeclarationContext differentiates from other interfaces.
	IsImportDeclarationContext()
}

type ImportDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportDeclarationContext() *ImportDeclarationContext {
	var p = new(ImportDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_importDeclaration
	return p
}

func InitEmptyImportDeclarationContext(p *ImportDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_importDeclaration
}

func (*ImportDeclarationContext) IsImportDeclarationContext() {}

func NewImportDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportDeclarationContext {
	var p = new(ImportDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_importDeclaration

	return p
}

func (s *ImportDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportDeclarationContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(ZserioParserIMPORT, 0)
}

func (s *ImportDeclarationContext) AllId() []IIdContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdContext); ok {
			len++
		}
	}

	tst := make([]IIdContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdContext); ok {
			tst[i] = t.(IIdContext)
			i++
		}
	}

	return tst
}

func (s *ImportDeclarationContext) Id(i int) IIdContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ImportDeclarationContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(ZserioParserDOT)
}

func (s *ImportDeclarationContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(ZserioParserDOT, i)
}

func (s *ImportDeclarationContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *ImportDeclarationContext) MULTIPLY() antlr.TerminalNode {
	return s.GetToken(ZserioParserMULTIPLY, 0)
}

func (s *ImportDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitImportDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) ImportDeclaration() (localctx IImportDeclarationContext) {
	localctx = NewImportDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, ZserioParserRULE_importDeclaration)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(181)
		p.Match(ZserioParserIMPORT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(182)
		p.Id()
	}
	{
		p.SetState(183)
		p.Match(ZserioParserDOT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(189)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 5, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(184)
				p.Id()
			}
			{
				p.SetState(185)
				p.Match(ZserioParserDOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(191)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 5, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(194)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ZserioParserID:
		{
			p.SetState(192)
			p.Id()
		}

	case ZserioParserMULTIPLY:
		{
			p.SetState(193)
			p.Match(ZserioParserMULTIPLY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	{
		p.SetState(196)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILanguageDirectiveContext is an interface to support dynamic dispatch.
type ILanguageDirectiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SymbolDefinition() ISymbolDefinitionContext
	TypeDeclaration() ITypeDeclarationContext

	// IsLanguageDirectiveContext differentiates from other interfaces.
	IsLanguageDirectiveContext()
}

type LanguageDirectiveContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLanguageDirectiveContext() *LanguageDirectiveContext {
	var p = new(LanguageDirectiveContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_languageDirective
	return p
}

func InitEmptyLanguageDirectiveContext(p *LanguageDirectiveContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_languageDirective
}

func (*LanguageDirectiveContext) IsLanguageDirectiveContext() {}

func NewLanguageDirectiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LanguageDirectiveContext {
	var p = new(LanguageDirectiveContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_languageDirective

	return p
}

func (s *LanguageDirectiveContext) GetParser() antlr.Parser { return s.parser }

func (s *LanguageDirectiveContext) SymbolDefinition() ISymbolDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISymbolDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISymbolDefinitionContext)
}

func (s *LanguageDirectiveContext) TypeDeclaration() ITypeDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeDeclarationContext)
}

func (s *LanguageDirectiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LanguageDirectiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LanguageDirectiveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitLanguageDirective(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) LanguageDirective() (localctx ILanguageDirectiveContext) {
	localctx = NewLanguageDirectiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, ZserioParserRULE_languageDirective)
	p.SetState(200)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ZserioParserCONST, ZserioParserRULE_GROUP:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(198)
			p.SymbolDefinition()
		}

	case ZserioParserBITMASK, ZserioParserCHOICE, ZserioParserENUM, ZserioParserINSTANTIATE, ZserioParserPUBSUB, ZserioParserSERVICE, ZserioParserSQL_DATABASE, ZserioParserSQL_TABLE, ZserioParserSTRUCTURE, ZserioParserSUBTYPE, ZserioParserUNION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(199)
			p.TypeDeclaration()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeDeclarationContext is an interface to support dynamic dispatch.
type ITypeDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SubtypeDeclaration() ISubtypeDeclarationContext
	StructureDeclaration() IStructureDeclarationContext
	ChoiceDeclaration() IChoiceDeclarationContext
	UnionDeclaration() IUnionDeclarationContext
	EnumDeclaration() IEnumDeclarationContext
	BitmaskDeclaration() IBitmaskDeclarationContext
	SqlTableDeclaration() ISqlTableDeclarationContext
	SqlDatabaseDefinition() ISqlDatabaseDefinitionContext
	ServiceDefinition() IServiceDefinitionContext
	PubsubDefinition() IPubsubDefinitionContext
	InstantiateDeclaration() IInstantiateDeclarationContext

	// IsTypeDeclarationContext differentiates from other interfaces.
	IsTypeDeclarationContext()
}

type TypeDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeDeclarationContext() *TypeDeclarationContext {
	var p = new(TypeDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_typeDeclaration
	return p
}

func InitEmptyTypeDeclarationContext(p *TypeDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_typeDeclaration
}

func (*TypeDeclarationContext) IsTypeDeclarationContext() {}

func NewTypeDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeDeclarationContext {
	var p = new(TypeDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_typeDeclaration

	return p
}

func (s *TypeDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeDeclarationContext) SubtypeDeclaration() ISubtypeDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISubtypeDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISubtypeDeclarationContext)
}

func (s *TypeDeclarationContext) StructureDeclaration() IStructureDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructureDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructureDeclarationContext)
}

func (s *TypeDeclarationContext) ChoiceDeclaration() IChoiceDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChoiceDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChoiceDeclarationContext)
}

func (s *TypeDeclarationContext) UnionDeclaration() IUnionDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnionDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnionDeclarationContext)
}

func (s *TypeDeclarationContext) EnumDeclaration() IEnumDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumDeclarationContext)
}

func (s *TypeDeclarationContext) BitmaskDeclaration() IBitmaskDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBitmaskDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBitmaskDeclarationContext)
}

func (s *TypeDeclarationContext) SqlTableDeclaration() ISqlTableDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISqlTableDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISqlTableDeclarationContext)
}

func (s *TypeDeclarationContext) SqlDatabaseDefinition() ISqlDatabaseDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISqlDatabaseDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISqlDatabaseDefinitionContext)
}

func (s *TypeDeclarationContext) ServiceDefinition() IServiceDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IServiceDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IServiceDefinitionContext)
}

func (s *TypeDeclarationContext) PubsubDefinition() IPubsubDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPubsubDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPubsubDefinitionContext)
}

func (s *TypeDeclarationContext) InstantiateDeclaration() IInstantiateDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInstantiateDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInstantiateDeclarationContext)
}

func (s *TypeDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitTypeDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) TypeDeclaration() (localctx ITypeDeclarationContext) {
	localctx = NewTypeDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, ZserioParserRULE_typeDeclaration)
	p.SetState(213)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ZserioParserSUBTYPE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(202)
			p.SubtypeDeclaration()
		}

	case ZserioParserSTRUCTURE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(203)
			p.StructureDeclaration()
		}

	case ZserioParserCHOICE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(204)
			p.ChoiceDeclaration()
		}

	case ZserioParserUNION:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(205)
			p.UnionDeclaration()
		}

	case ZserioParserENUM:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(206)
			p.EnumDeclaration()
		}

	case ZserioParserBITMASK:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(207)
			p.BitmaskDeclaration()
		}

	case ZserioParserSQL_TABLE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(208)
			p.SqlTableDeclaration()
		}

	case ZserioParserSQL_DATABASE:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(209)
			p.SqlDatabaseDefinition()
		}

	case ZserioParserSERVICE:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(210)
			p.ServiceDefinition()
		}

	case ZserioParserPUBSUB:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(211)
			p.PubsubDefinition()
		}

	case ZserioParserINSTANTIATE:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(212)
			p.InstantiateDeclaration()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISymbolDefinitionContext is an interface to support dynamic dispatch.
type ISymbolDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ConstDefinition() IConstDefinitionContext
	RuleGroupDefinition() IRuleGroupDefinitionContext

	// IsSymbolDefinitionContext differentiates from other interfaces.
	IsSymbolDefinitionContext()
}

type SymbolDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySymbolDefinitionContext() *SymbolDefinitionContext {
	var p = new(SymbolDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_symbolDefinition
	return p
}

func InitEmptySymbolDefinitionContext(p *SymbolDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_symbolDefinition
}

func (*SymbolDefinitionContext) IsSymbolDefinitionContext() {}

func NewSymbolDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SymbolDefinitionContext {
	var p = new(SymbolDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_symbolDefinition

	return p
}

func (s *SymbolDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *SymbolDefinitionContext) ConstDefinition() IConstDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstDefinitionContext)
}

func (s *SymbolDefinitionContext) RuleGroupDefinition() IRuleGroupDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRuleGroupDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRuleGroupDefinitionContext)
}

func (s *SymbolDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SymbolDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SymbolDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitSymbolDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) SymbolDefinition() (localctx ISymbolDefinitionContext) {
	localctx = NewSymbolDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, ZserioParserRULE_symbolDefinition)
	p.SetState(217)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ZserioParserCONST:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(215)
			p.ConstDefinition()
		}

	case ZserioParserRULE_GROUP:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(216)
			p.RuleGroupDefinition()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConstDefinitionContext is an interface to support dynamic dispatch.
type IConstDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CONST() antlr.TerminalNode
	TypeInstantiation() ITypeInstantiationContext
	Id() IIdContext
	ASSIGN() antlr.TerminalNode
	Expression() IExpressionContext
	SEMICOLON() antlr.TerminalNode

	// IsConstDefinitionContext differentiates from other interfaces.
	IsConstDefinitionContext()
}

type ConstDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstDefinitionContext() *ConstDefinitionContext {
	var p = new(ConstDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_constDefinition
	return p
}

func InitEmptyConstDefinitionContext(p *ConstDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_constDefinition
}

func (*ConstDefinitionContext) IsConstDefinitionContext() {}

func NewConstDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstDefinitionContext {
	var p = new(ConstDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_constDefinition

	return p
}

func (s *ConstDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstDefinitionContext) CONST() antlr.TerminalNode {
	return s.GetToken(ZserioParserCONST, 0)
}

func (s *ConstDefinitionContext) TypeInstantiation() ITypeInstantiationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeInstantiationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeInstantiationContext)
}

func (s *ConstDefinitionContext) Id() IIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ConstDefinitionContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(ZserioParserASSIGN, 0)
}

func (s *ConstDefinitionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConstDefinitionContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *ConstDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitConstDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) ConstDefinition() (localctx IConstDefinitionContext) {
	localctx = NewConstDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, ZserioParserRULE_constDefinition)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(219)
		p.Match(ZserioParserCONST)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(220)
		p.TypeInstantiation()
	}
	{
		p.SetState(221)
		p.Id()
	}
	{
		p.SetState(222)
		p.Match(ZserioParserASSIGN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(223)
		p.expression(0)
	}
	{
		p.SetState(224)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRuleGroupDefinitionContext is an interface to support dynamic dispatch.
type IRuleGroupDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RULE_GROUP() antlr.TerminalNode
	Id() IIdContext
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode
	AllRuleDefinition() []IRuleDefinitionContext
	RuleDefinition(i int) IRuleDefinitionContext

	// IsRuleGroupDefinitionContext differentiates from other interfaces.
	IsRuleGroupDefinitionContext()
}

type RuleGroupDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRuleGroupDefinitionContext() *RuleGroupDefinitionContext {
	var p = new(RuleGroupDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_ruleGroupDefinition
	return p
}

func InitEmptyRuleGroupDefinitionContext(p *RuleGroupDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_ruleGroupDefinition
}

func (*RuleGroupDefinitionContext) IsRuleGroupDefinitionContext() {}

func NewRuleGroupDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RuleGroupDefinitionContext {
	var p = new(RuleGroupDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_ruleGroupDefinition

	return p
}

func (s *RuleGroupDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *RuleGroupDefinitionContext) RULE_GROUP() antlr.TerminalNode {
	return s.GetToken(ZserioParserRULE_GROUP, 0)
}

func (s *RuleGroupDefinitionContext) Id() IIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *RuleGroupDefinitionContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(ZserioParserLBRACE, 0)
}

func (s *RuleGroupDefinitionContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(ZserioParserRBRACE, 0)
}

func (s *RuleGroupDefinitionContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *RuleGroupDefinitionContext) AllRuleDefinition() []IRuleDefinitionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRuleDefinitionContext); ok {
			len++
		}
	}

	tst := make([]IRuleDefinitionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRuleDefinitionContext); ok {
			tst[i] = t.(IRuleDefinitionContext)
			i++
		}
	}

	return tst
}

func (s *RuleGroupDefinitionContext) RuleDefinition(i int) IRuleDefinitionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRuleDefinitionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRuleDefinitionContext)
}

func (s *RuleGroupDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RuleGroupDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RuleGroupDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitRuleGroupDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) RuleGroupDefinition() (localctx IRuleGroupDefinitionContext) {
	localctx = NewRuleGroupDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, ZserioParserRULE_ruleGroupDefinition)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(226)
		p.Match(ZserioParserRULE_GROUP)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(227)
		p.Id()
	}
	{
		p.SetState(228)
		p.Match(ZserioParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(232)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ZserioParserRULE {
		{
			p.SetState(229)
			p.RuleDefinition()
		}

		p.SetState(234)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(235)
		p.Match(ZserioParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(236)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRuleDefinitionContext is an interface to support dynamic dispatch.
type IRuleDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RULE() antlr.TerminalNode
	Expression() IExpressionContext
	SEMICOLON() antlr.TerminalNode

	// IsRuleDefinitionContext differentiates from other interfaces.
	IsRuleDefinitionContext()
}

type RuleDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRuleDefinitionContext() *RuleDefinitionContext {
	var p = new(RuleDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_ruleDefinition
	return p
}

func InitEmptyRuleDefinitionContext(p *RuleDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_ruleDefinition
}

func (*RuleDefinitionContext) IsRuleDefinitionContext() {}

func NewRuleDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RuleDefinitionContext {
	var p = new(RuleDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_ruleDefinition

	return p
}

func (s *RuleDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *RuleDefinitionContext) RULE() antlr.TerminalNode {
	return s.GetToken(ZserioParserRULE, 0)
}

func (s *RuleDefinitionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *RuleDefinitionContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *RuleDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RuleDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RuleDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitRuleDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) RuleDefinition() (localctx IRuleDefinitionContext) {
	localctx = NewRuleDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, ZserioParserRULE_ruleDefinition)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(238)
		p.Match(ZserioParserRULE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(239)
		p.expression(0)
	}
	{
		p.SetState(240)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISubtypeDeclarationContext is an interface to support dynamic dispatch.
type ISubtypeDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SUBTYPE() antlr.TerminalNode
	TypeReference() ITypeReferenceContext
	Id() IIdContext
	SEMICOLON() antlr.TerminalNode

	// IsSubtypeDeclarationContext differentiates from other interfaces.
	IsSubtypeDeclarationContext()
}

type SubtypeDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubtypeDeclarationContext() *SubtypeDeclarationContext {
	var p = new(SubtypeDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_subtypeDeclaration
	return p
}

func InitEmptySubtypeDeclarationContext(p *SubtypeDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_subtypeDeclaration
}

func (*SubtypeDeclarationContext) IsSubtypeDeclarationContext() {}

func NewSubtypeDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubtypeDeclarationContext {
	var p = new(SubtypeDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_subtypeDeclaration

	return p
}

func (s *SubtypeDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *SubtypeDeclarationContext) SUBTYPE() antlr.TerminalNode {
	return s.GetToken(ZserioParserSUBTYPE, 0)
}

func (s *SubtypeDeclarationContext) TypeReference() ITypeReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeReferenceContext)
}

func (s *SubtypeDeclarationContext) Id() IIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *SubtypeDeclarationContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *SubtypeDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubtypeDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubtypeDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitSubtypeDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) SubtypeDeclaration() (localctx ISubtypeDeclarationContext) {
	localctx = NewSubtypeDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, ZserioParserRULE_subtypeDeclaration)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(242)
		p.Match(ZserioParserSUBTYPE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(243)
		p.TypeReference()
	}
	{
		p.SetState(244)
		p.Id()
	}
	{
		p.SetState(245)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStructureDeclarationContext is an interface to support dynamic dispatch.
type IStructureDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STRUCTURE() antlr.TerminalNode
	Id() IIdContext
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode
	TemplateParameters() ITemplateParametersContext
	TypeParameters() ITypeParametersContext
	AllStructureFieldDefinition() []IStructureFieldDefinitionContext
	StructureFieldDefinition(i int) IStructureFieldDefinitionContext
	AllFunctionDefinition() []IFunctionDefinitionContext
	FunctionDefinition(i int) IFunctionDefinitionContext

	// IsStructureDeclarationContext differentiates from other interfaces.
	IsStructureDeclarationContext()
}

type StructureDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructureDeclarationContext() *StructureDeclarationContext {
	var p = new(StructureDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_structureDeclaration
	return p
}

func InitEmptyStructureDeclarationContext(p *StructureDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_structureDeclaration
}

func (*StructureDeclarationContext) IsStructureDeclarationContext() {}

func NewStructureDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructureDeclarationContext {
	var p = new(StructureDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_structureDeclaration

	return p
}

func (s *StructureDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *StructureDeclarationContext) STRUCTURE() antlr.TerminalNode {
	return s.GetToken(ZserioParserSTRUCTURE, 0)
}

func (s *StructureDeclarationContext) Id() IIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *StructureDeclarationContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(ZserioParserLBRACE, 0)
}

func (s *StructureDeclarationContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(ZserioParserRBRACE, 0)
}

func (s *StructureDeclarationContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *StructureDeclarationContext) TemplateParameters() ITemplateParametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateParametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateParametersContext)
}

func (s *StructureDeclarationContext) TypeParameters() ITypeParametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeParametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeParametersContext)
}

func (s *StructureDeclarationContext) AllStructureFieldDefinition() []IStructureFieldDefinitionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStructureFieldDefinitionContext); ok {
			len++
		}
	}

	tst := make([]IStructureFieldDefinitionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStructureFieldDefinitionContext); ok {
			tst[i] = t.(IStructureFieldDefinitionContext)
			i++
		}
	}

	return tst
}

func (s *StructureDeclarationContext) StructureFieldDefinition(i int) IStructureFieldDefinitionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructureFieldDefinitionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructureFieldDefinitionContext)
}

func (s *StructureDeclarationContext) AllFunctionDefinition() []IFunctionDefinitionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFunctionDefinitionContext); ok {
			len++
		}
	}

	tst := make([]IFunctionDefinitionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFunctionDefinitionContext); ok {
			tst[i] = t.(IFunctionDefinitionContext)
			i++
		}
	}

	return tst
}

func (s *StructureDeclarationContext) FunctionDefinition(i int) IFunctionDefinitionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionDefinitionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionDefinitionContext)
}

func (s *StructureDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructureDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructureDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitStructureDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) StructureDeclaration() (localctx IStructureDeclarationContext) {
	localctx = NewStructureDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, ZserioParserRULE_structureDeclaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(247)
		p.Match(ZserioParserSTRUCTURE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(248)
		p.Id()
	}
	p.SetState(250)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserLT {
		{
			p.SetState(249)
			p.TemplateParameters()
		}

	}
	p.SetState(253)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserLPAREN {
		{
			p.SetState(252)
			p.TypeParameters()
		}

	}
	{
		p.SetState(255)
		p.Match(ZserioParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(259)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&6911468619424137224) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&280933804412929) != 0) {
		{
			p.SetState(256)
			p.StructureFieldDefinition()
		}

		p.SetState(261)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(265)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ZserioParserFUNCTION {
		{
			p.SetState(262)
			p.FunctionDefinition()
		}

		p.SetState(267)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(268)
		p.Match(ZserioParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(269)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStructureFieldDefinitionContext is an interface to support dynamic dispatch.
type IStructureFieldDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FieldTypeId() IFieldTypeIdContext
	SEMICOLON() antlr.TerminalNode
	FieldAlignment() IFieldAlignmentContext
	FieldOffset() IFieldOffsetContext
	OPTIONAL() antlr.TerminalNode
	FieldInitializer() IFieldInitializerContext
	FieldOptionalClause() IFieldOptionalClauseContext
	FieldConstraint() IFieldConstraintContext

	// IsStructureFieldDefinitionContext differentiates from other interfaces.
	IsStructureFieldDefinitionContext()
}

type StructureFieldDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructureFieldDefinitionContext() *StructureFieldDefinitionContext {
	var p = new(StructureFieldDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_structureFieldDefinition
	return p
}

func InitEmptyStructureFieldDefinitionContext(p *StructureFieldDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_structureFieldDefinition
}

func (*StructureFieldDefinitionContext) IsStructureFieldDefinitionContext() {}

func NewStructureFieldDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructureFieldDefinitionContext {
	var p = new(StructureFieldDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_structureFieldDefinition

	return p
}

func (s *StructureFieldDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *StructureFieldDefinitionContext) FieldTypeId() IFieldTypeIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldTypeIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldTypeIdContext)
}

func (s *StructureFieldDefinitionContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *StructureFieldDefinitionContext) FieldAlignment() IFieldAlignmentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldAlignmentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldAlignmentContext)
}

func (s *StructureFieldDefinitionContext) FieldOffset() IFieldOffsetContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldOffsetContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldOffsetContext)
}

func (s *StructureFieldDefinitionContext) OPTIONAL() antlr.TerminalNode {
	return s.GetToken(ZserioParserOPTIONAL, 0)
}

func (s *StructureFieldDefinitionContext) FieldInitializer() IFieldInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldInitializerContext)
}

func (s *StructureFieldDefinitionContext) FieldOptionalClause() IFieldOptionalClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldOptionalClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldOptionalClauseContext)
}

func (s *StructureFieldDefinitionContext) FieldConstraint() IFieldConstraintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldConstraintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldConstraintContext)
}

func (s *StructureFieldDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructureFieldDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructureFieldDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitStructureFieldDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) StructureFieldDefinition() (localctx IStructureFieldDefinitionContext) {
	localctx = NewStructureFieldDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, ZserioParserRULE_structureFieldDefinition)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(272)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserALIGN {
		{
			p.SetState(271)
			p.FieldAlignment()
		}

	}
	p.SetState(275)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 16, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(274)
			p.FieldOffset()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(278)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserOPTIONAL {
		{
			p.SetState(277)
			p.Match(ZserioParserOPTIONAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(280)
		p.FieldTypeId()
	}
	p.SetState(282)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserASSIGN {
		{
			p.SetState(281)
			p.FieldInitializer()
		}

	}
	p.SetState(285)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserIF {
		{
			p.SetState(284)
			p.FieldOptionalClause()
		}

	}
	p.SetState(288)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserCOLON {
		{
			p.SetState(287)
			p.FieldConstraint()
		}

	}
	{
		p.SetState(290)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFieldAlignmentContext is an interface to support dynamic dispatch.
type IFieldAlignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ALIGN() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	Expression() IExpressionContext
	RPAREN() antlr.TerminalNode
	COLON() antlr.TerminalNode

	// IsFieldAlignmentContext differentiates from other interfaces.
	IsFieldAlignmentContext()
}

type FieldAlignmentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldAlignmentContext() *FieldAlignmentContext {
	var p = new(FieldAlignmentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_fieldAlignment
	return p
}

func InitEmptyFieldAlignmentContext(p *FieldAlignmentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_fieldAlignment
}

func (*FieldAlignmentContext) IsFieldAlignmentContext() {}

func NewFieldAlignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldAlignmentContext {
	var p = new(FieldAlignmentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_fieldAlignment

	return p
}

func (s *FieldAlignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldAlignmentContext) ALIGN() antlr.TerminalNode {
	return s.GetToken(ZserioParserALIGN, 0)
}

func (s *FieldAlignmentContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserLPAREN, 0)
}

func (s *FieldAlignmentContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FieldAlignmentContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserRPAREN, 0)
}

func (s *FieldAlignmentContext) COLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserCOLON, 0)
}

func (s *FieldAlignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldAlignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldAlignmentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitFieldAlignment(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) FieldAlignment() (localctx IFieldAlignmentContext) {
	localctx = NewFieldAlignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, ZserioParserRULE_fieldAlignment)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(292)
		p.Match(ZserioParserALIGN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(293)
		p.Match(ZserioParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(294)
		p.expression(0)
	}
	{
		p.SetState(295)
		p.Match(ZserioParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(296)
		p.Match(ZserioParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFieldOffsetContext is an interface to support dynamic dispatch.
type IFieldOffsetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	COLON() antlr.TerminalNode

	// IsFieldOffsetContext differentiates from other interfaces.
	IsFieldOffsetContext()
}

type FieldOffsetContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldOffsetContext() *FieldOffsetContext {
	var p = new(FieldOffsetContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_fieldOffset
	return p
}

func InitEmptyFieldOffsetContext(p *FieldOffsetContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_fieldOffset
}

func (*FieldOffsetContext) IsFieldOffsetContext() {}

func NewFieldOffsetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldOffsetContext {
	var p = new(FieldOffsetContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_fieldOffset

	return p
}

func (s *FieldOffsetContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldOffsetContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FieldOffsetContext) COLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserCOLON, 0)
}

func (s *FieldOffsetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldOffsetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldOffsetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitFieldOffset(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) FieldOffset() (localctx IFieldOffsetContext) {
	localctx = NewFieldOffsetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, ZserioParserRULE_fieldOffset)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(298)
		p.expression(0)
	}
	{
		p.SetState(299)
		p.Match(ZserioParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFieldTypeIdContext is an interface to support dynamic dispatch.
type IFieldTypeIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TypeInstantiation() ITypeInstantiationContext
	Id() IIdContext
	PACKED() antlr.TerminalNode
	IMPLICIT() antlr.TerminalNode
	FieldArrayRange() IFieldArrayRangeContext

	// IsFieldTypeIdContext differentiates from other interfaces.
	IsFieldTypeIdContext()
}

type FieldTypeIdContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldTypeIdContext() *FieldTypeIdContext {
	var p = new(FieldTypeIdContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_fieldTypeId
	return p
}

func InitEmptyFieldTypeIdContext(p *FieldTypeIdContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_fieldTypeId
}

func (*FieldTypeIdContext) IsFieldTypeIdContext() {}

func NewFieldTypeIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldTypeIdContext {
	var p = new(FieldTypeIdContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_fieldTypeId

	return p
}

func (s *FieldTypeIdContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldTypeIdContext) TypeInstantiation() ITypeInstantiationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeInstantiationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeInstantiationContext)
}

func (s *FieldTypeIdContext) Id() IIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *FieldTypeIdContext) PACKED() antlr.TerminalNode {
	return s.GetToken(ZserioParserPACKED, 0)
}

func (s *FieldTypeIdContext) IMPLICIT() antlr.TerminalNode {
	return s.GetToken(ZserioParserIMPLICIT, 0)
}

func (s *FieldTypeIdContext) FieldArrayRange() IFieldArrayRangeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldArrayRangeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldArrayRangeContext)
}

func (s *FieldTypeIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldTypeIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldTypeIdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitFieldTypeId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) FieldTypeId() (localctx IFieldTypeIdContext) {
	localctx = NewFieldTypeIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, ZserioParserRULE_fieldTypeId)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(302)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserPACKED {
		{
			p.SetState(301)
			p.Match(ZserioParserPACKED)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(305)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserIMPLICIT {
		{
			p.SetState(304)
			p.Match(ZserioParserIMPLICIT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(307)
		p.TypeInstantiation()
	}
	{
		p.SetState(308)
		p.Id()
	}
	p.SetState(310)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserLBRACKET {
		{
			p.SetState(309)
			p.FieldArrayRange()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFieldArrayRangeContext is an interface to support dynamic dispatch.
type IFieldArrayRangeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LBRACKET() antlr.TerminalNode
	RBRACKET() antlr.TerminalNode
	Expression() IExpressionContext

	// IsFieldArrayRangeContext differentiates from other interfaces.
	IsFieldArrayRangeContext()
}

type FieldArrayRangeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldArrayRangeContext() *FieldArrayRangeContext {
	var p = new(FieldArrayRangeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_fieldArrayRange
	return p
}

func InitEmptyFieldArrayRangeContext(p *FieldArrayRangeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_fieldArrayRange
}

func (*FieldArrayRangeContext) IsFieldArrayRangeContext() {}

func NewFieldArrayRangeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldArrayRangeContext {
	var p = new(FieldArrayRangeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_fieldArrayRange

	return p
}

func (s *FieldArrayRangeContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldArrayRangeContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(ZserioParserLBRACKET, 0)
}

func (s *FieldArrayRangeContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(ZserioParserRBRACKET, 0)
}

func (s *FieldArrayRangeContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FieldArrayRangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldArrayRangeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldArrayRangeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitFieldArrayRange(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) FieldArrayRange() (localctx IFieldArrayRangeContext) {
	localctx = NewFieldArrayRangeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, ZserioParserRULE_fieldArrayRange)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(312)
		p.Match(ZserioParserLBRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(314)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&2019864433966776328) != 0) || ((int64((_la-87)) & ^0x3f) == 0 && ((int64(1)<<(_la-87))&33488897) != 0) {
		{
			p.SetState(313)
			p.expression(0)
		}

	}
	{
		p.SetState(316)
		p.Match(ZserioParserRBRACKET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFieldInitializerContext is an interface to support dynamic dispatch.
type IFieldInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ASSIGN() antlr.TerminalNode
	Expression() IExpressionContext

	// IsFieldInitializerContext differentiates from other interfaces.
	IsFieldInitializerContext()
}

type FieldInitializerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldInitializerContext() *FieldInitializerContext {
	var p = new(FieldInitializerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_fieldInitializer
	return p
}

func InitEmptyFieldInitializerContext(p *FieldInitializerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_fieldInitializer
}

func (*FieldInitializerContext) IsFieldInitializerContext() {}

func NewFieldInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldInitializerContext {
	var p = new(FieldInitializerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_fieldInitializer

	return p
}

func (s *FieldInitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldInitializerContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(ZserioParserASSIGN, 0)
}

func (s *FieldInitializerContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FieldInitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldInitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldInitializerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitFieldInitializer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) FieldInitializer() (localctx IFieldInitializerContext) {
	localctx = NewFieldInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, ZserioParserRULE_fieldInitializer)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(318)
		p.Match(ZserioParserASSIGN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(319)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFieldOptionalClauseContext is an interface to support dynamic dispatch.
type IFieldOptionalClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IF() antlr.TerminalNode
	Expression() IExpressionContext

	// IsFieldOptionalClauseContext differentiates from other interfaces.
	IsFieldOptionalClauseContext()
}

type FieldOptionalClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldOptionalClauseContext() *FieldOptionalClauseContext {
	var p = new(FieldOptionalClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_fieldOptionalClause
	return p
}

func InitEmptyFieldOptionalClauseContext(p *FieldOptionalClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_fieldOptionalClause
}

func (*FieldOptionalClauseContext) IsFieldOptionalClauseContext() {}

func NewFieldOptionalClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldOptionalClauseContext {
	var p = new(FieldOptionalClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_fieldOptionalClause

	return p
}

func (s *FieldOptionalClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldOptionalClauseContext) IF() antlr.TerminalNode {
	return s.GetToken(ZserioParserIF, 0)
}

func (s *FieldOptionalClauseContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FieldOptionalClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldOptionalClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldOptionalClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitFieldOptionalClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) FieldOptionalClause() (localctx IFieldOptionalClauseContext) {
	localctx = NewFieldOptionalClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, ZserioParserRULE_fieldOptionalClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(321)
		p.Match(ZserioParserIF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(322)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFieldConstraintContext is an interface to support dynamic dispatch.
type IFieldConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COLON() antlr.TerminalNode
	Expression() IExpressionContext

	// IsFieldConstraintContext differentiates from other interfaces.
	IsFieldConstraintContext()
}

type FieldConstraintContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldConstraintContext() *FieldConstraintContext {
	var p = new(FieldConstraintContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_fieldConstraint
	return p
}

func InitEmptyFieldConstraintContext(p *FieldConstraintContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_fieldConstraint
}

func (*FieldConstraintContext) IsFieldConstraintContext() {}

func NewFieldConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldConstraintContext {
	var p = new(FieldConstraintContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_fieldConstraint

	return p
}

func (s *FieldConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldConstraintContext) COLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserCOLON, 0)
}

func (s *FieldConstraintContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FieldConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitFieldConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) FieldConstraint() (localctx IFieldConstraintContext) {
	localctx = NewFieldConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, ZserioParserRULE_fieldConstraint)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(324)
		p.Match(ZserioParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(325)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IChoiceDeclarationContext is an interface to support dynamic dispatch.
type IChoiceDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CHOICE() antlr.TerminalNode
	Id() IIdContext
	TypeParameters() ITypeParametersContext
	ON() antlr.TerminalNode
	Expression() IExpressionContext
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode
	TemplateParameters() ITemplateParametersContext
	AllChoiceCases() []IChoiceCasesContext
	ChoiceCases(i int) IChoiceCasesContext
	ChoiceDefault() IChoiceDefaultContext
	AllFunctionDefinition() []IFunctionDefinitionContext
	FunctionDefinition(i int) IFunctionDefinitionContext

	// IsChoiceDeclarationContext differentiates from other interfaces.
	IsChoiceDeclarationContext()
}

type ChoiceDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChoiceDeclarationContext() *ChoiceDeclarationContext {
	var p = new(ChoiceDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_choiceDeclaration
	return p
}

func InitEmptyChoiceDeclarationContext(p *ChoiceDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_choiceDeclaration
}

func (*ChoiceDeclarationContext) IsChoiceDeclarationContext() {}

func NewChoiceDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChoiceDeclarationContext {
	var p = new(ChoiceDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_choiceDeclaration

	return p
}

func (s *ChoiceDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ChoiceDeclarationContext) CHOICE() antlr.TerminalNode {
	return s.GetToken(ZserioParserCHOICE, 0)
}

func (s *ChoiceDeclarationContext) Id() IIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ChoiceDeclarationContext) TypeParameters() ITypeParametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeParametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeParametersContext)
}

func (s *ChoiceDeclarationContext) ON() antlr.TerminalNode {
	return s.GetToken(ZserioParserON, 0)
}

func (s *ChoiceDeclarationContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ChoiceDeclarationContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(ZserioParserLBRACE, 0)
}

func (s *ChoiceDeclarationContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(ZserioParserRBRACE, 0)
}

func (s *ChoiceDeclarationContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *ChoiceDeclarationContext) TemplateParameters() ITemplateParametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateParametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateParametersContext)
}

func (s *ChoiceDeclarationContext) AllChoiceCases() []IChoiceCasesContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IChoiceCasesContext); ok {
			len++
		}
	}

	tst := make([]IChoiceCasesContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IChoiceCasesContext); ok {
			tst[i] = t.(IChoiceCasesContext)
			i++
		}
	}

	return tst
}

func (s *ChoiceDeclarationContext) ChoiceCases(i int) IChoiceCasesContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChoiceCasesContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChoiceCasesContext)
}

func (s *ChoiceDeclarationContext) ChoiceDefault() IChoiceDefaultContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChoiceDefaultContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChoiceDefaultContext)
}

func (s *ChoiceDeclarationContext) AllFunctionDefinition() []IFunctionDefinitionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFunctionDefinitionContext); ok {
			len++
		}
	}

	tst := make([]IFunctionDefinitionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFunctionDefinitionContext); ok {
			tst[i] = t.(IFunctionDefinitionContext)
			i++
		}
	}

	return tst
}

func (s *ChoiceDeclarationContext) FunctionDefinition(i int) IFunctionDefinitionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionDefinitionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionDefinitionContext)
}

func (s *ChoiceDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChoiceDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChoiceDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitChoiceDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) ChoiceDeclaration() (localctx IChoiceDeclarationContext) {
	localctx = NewChoiceDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, ZserioParserRULE_choiceDeclaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(327)
		p.Match(ZserioParserCHOICE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(328)
		p.Id()
	}
	p.SetState(330)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserLT {
		{
			p.SetState(329)
			p.TemplateParameters()
		}

	}
	{
		p.SetState(332)
		p.TypeParameters()
	}
	{
		p.SetState(333)
		p.Match(ZserioParserON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(334)
		p.expression(0)
	}
	{
		p.SetState(335)
		p.Match(ZserioParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(339)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ZserioParserCASE {
		{
			p.SetState(336)
			p.ChoiceCases()
		}

		p.SetState(341)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(343)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserDEFAULT {
		{
			p.SetState(342)
			p.ChoiceDefault()
		}

	}
	p.SetState(348)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ZserioParserFUNCTION {
		{
			p.SetState(345)
			p.FunctionDefinition()
		}

		p.SetState(350)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(351)
		p.Match(ZserioParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(352)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IChoiceCasesContext is an interface to support dynamic dispatch.
type IChoiceCasesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SEMICOLON() antlr.TerminalNode
	AllChoiceCase() []IChoiceCaseContext
	ChoiceCase(i int) IChoiceCaseContext
	ChoiceFieldDefinition() IChoiceFieldDefinitionContext

	// IsChoiceCasesContext differentiates from other interfaces.
	IsChoiceCasesContext()
}

type ChoiceCasesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChoiceCasesContext() *ChoiceCasesContext {
	var p = new(ChoiceCasesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_choiceCases
	return p
}

func InitEmptyChoiceCasesContext(p *ChoiceCasesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_choiceCases
}

func (*ChoiceCasesContext) IsChoiceCasesContext() {}

func NewChoiceCasesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChoiceCasesContext {
	var p = new(ChoiceCasesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_choiceCases

	return p
}

func (s *ChoiceCasesContext) GetParser() antlr.Parser { return s.parser }

func (s *ChoiceCasesContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *ChoiceCasesContext) AllChoiceCase() []IChoiceCaseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IChoiceCaseContext); ok {
			len++
		}
	}

	tst := make([]IChoiceCaseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IChoiceCaseContext); ok {
			tst[i] = t.(IChoiceCaseContext)
			i++
		}
	}

	return tst
}

func (s *ChoiceCasesContext) ChoiceCase(i int) IChoiceCaseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChoiceCaseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChoiceCaseContext)
}

func (s *ChoiceCasesContext) ChoiceFieldDefinition() IChoiceFieldDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChoiceFieldDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChoiceFieldDefinitionContext)
}

func (s *ChoiceCasesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChoiceCasesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChoiceCasesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitChoiceCases(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) ChoiceCases() (localctx IChoiceCasesContext) {
	localctx = NewChoiceCasesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, ZserioParserRULE_choiceCases)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(355)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == ZserioParserCASE {
		{
			p.SetState(354)
			p.ChoiceCase()
		}

		p.SetState(357)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(360)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&279918162735005696) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&140746063482881) != 0) {
		{
			p.SetState(359)
			p.ChoiceFieldDefinition()
		}

	}
	{
		p.SetState(362)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IChoiceCaseContext is an interface to support dynamic dispatch.
type IChoiceCaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CASE() antlr.TerminalNode
	Expression() IExpressionContext
	COLON() antlr.TerminalNode

	// IsChoiceCaseContext differentiates from other interfaces.
	IsChoiceCaseContext()
}

type ChoiceCaseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChoiceCaseContext() *ChoiceCaseContext {
	var p = new(ChoiceCaseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_choiceCase
	return p
}

func InitEmptyChoiceCaseContext(p *ChoiceCaseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_choiceCase
}

func (*ChoiceCaseContext) IsChoiceCaseContext() {}

func NewChoiceCaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChoiceCaseContext {
	var p = new(ChoiceCaseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_choiceCase

	return p
}

func (s *ChoiceCaseContext) GetParser() antlr.Parser { return s.parser }

func (s *ChoiceCaseContext) CASE() antlr.TerminalNode {
	return s.GetToken(ZserioParserCASE, 0)
}

func (s *ChoiceCaseContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ChoiceCaseContext) COLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserCOLON, 0)
}

func (s *ChoiceCaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChoiceCaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChoiceCaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitChoiceCase(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) ChoiceCase() (localctx IChoiceCaseContext) {
	localctx = NewChoiceCaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, ZserioParserRULE_choiceCase)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(364)
		p.Match(ZserioParserCASE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(365)
		p.expression(0)
	}
	{
		p.SetState(366)
		p.Match(ZserioParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IChoiceDefaultContext is an interface to support dynamic dispatch.
type IChoiceDefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DEFAULT() antlr.TerminalNode
	COLON() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode
	ChoiceFieldDefinition() IChoiceFieldDefinitionContext

	// IsChoiceDefaultContext differentiates from other interfaces.
	IsChoiceDefaultContext()
}

type ChoiceDefaultContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChoiceDefaultContext() *ChoiceDefaultContext {
	var p = new(ChoiceDefaultContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_choiceDefault
	return p
}

func InitEmptyChoiceDefaultContext(p *ChoiceDefaultContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_choiceDefault
}

func (*ChoiceDefaultContext) IsChoiceDefaultContext() {}

func NewChoiceDefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChoiceDefaultContext {
	var p = new(ChoiceDefaultContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_choiceDefault

	return p
}

func (s *ChoiceDefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *ChoiceDefaultContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(ZserioParserDEFAULT, 0)
}

func (s *ChoiceDefaultContext) COLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserCOLON, 0)
}

func (s *ChoiceDefaultContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *ChoiceDefaultContext) ChoiceFieldDefinition() IChoiceFieldDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChoiceFieldDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChoiceFieldDefinitionContext)
}

func (s *ChoiceDefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChoiceDefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChoiceDefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitChoiceDefault(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) ChoiceDefault() (localctx IChoiceDefaultContext) {
	localctx = NewChoiceDefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, ZserioParserRULE_choiceDefault)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(368)
		p.Match(ZserioParserDEFAULT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(369)
		p.Match(ZserioParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(371)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&279918162735005696) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&140746063482881) != 0) {
		{
			p.SetState(370)
			p.ChoiceFieldDefinition()
		}

	}
	{
		p.SetState(373)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IChoiceFieldDefinitionContext is an interface to support dynamic dispatch.
type IChoiceFieldDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FieldTypeId() IFieldTypeIdContext
	FieldConstraint() IFieldConstraintContext

	// IsChoiceFieldDefinitionContext differentiates from other interfaces.
	IsChoiceFieldDefinitionContext()
}

type ChoiceFieldDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChoiceFieldDefinitionContext() *ChoiceFieldDefinitionContext {
	var p = new(ChoiceFieldDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_choiceFieldDefinition
	return p
}

func InitEmptyChoiceFieldDefinitionContext(p *ChoiceFieldDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_choiceFieldDefinition
}

func (*ChoiceFieldDefinitionContext) IsChoiceFieldDefinitionContext() {}

func NewChoiceFieldDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChoiceFieldDefinitionContext {
	var p = new(ChoiceFieldDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_choiceFieldDefinition

	return p
}

func (s *ChoiceFieldDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ChoiceFieldDefinitionContext) FieldTypeId() IFieldTypeIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldTypeIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldTypeIdContext)
}

func (s *ChoiceFieldDefinitionContext) FieldConstraint() IFieldConstraintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldConstraintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldConstraintContext)
}

func (s *ChoiceFieldDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChoiceFieldDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChoiceFieldDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitChoiceFieldDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) ChoiceFieldDefinition() (localctx IChoiceFieldDefinitionContext) {
	localctx = NewChoiceFieldDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, ZserioParserRULE_choiceFieldDefinition)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(375)
		p.FieldTypeId()
	}
	p.SetState(377)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserCOLON {
		{
			p.SetState(376)
			p.FieldConstraint()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnionDeclarationContext is an interface to support dynamic dispatch.
type IUnionDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UNION() antlr.TerminalNode
	Id() IIdContext
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode
	TemplateParameters() ITemplateParametersContext
	TypeParameters() ITypeParametersContext
	AllUnionFieldDefinition() []IUnionFieldDefinitionContext
	UnionFieldDefinition(i int) IUnionFieldDefinitionContext
	AllFunctionDefinition() []IFunctionDefinitionContext
	FunctionDefinition(i int) IFunctionDefinitionContext

	// IsUnionDeclarationContext differentiates from other interfaces.
	IsUnionDeclarationContext()
}

type UnionDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnionDeclarationContext() *UnionDeclarationContext {
	var p = new(UnionDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_unionDeclaration
	return p
}

func InitEmptyUnionDeclarationContext(p *UnionDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_unionDeclaration
}

func (*UnionDeclarationContext) IsUnionDeclarationContext() {}

func NewUnionDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnionDeclarationContext {
	var p = new(UnionDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_unionDeclaration

	return p
}

func (s *UnionDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *UnionDeclarationContext) UNION() antlr.TerminalNode {
	return s.GetToken(ZserioParserUNION, 0)
}

func (s *UnionDeclarationContext) Id() IIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *UnionDeclarationContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(ZserioParserLBRACE, 0)
}

func (s *UnionDeclarationContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(ZserioParserRBRACE, 0)
}

func (s *UnionDeclarationContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *UnionDeclarationContext) TemplateParameters() ITemplateParametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateParametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateParametersContext)
}

func (s *UnionDeclarationContext) TypeParameters() ITypeParametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeParametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeParametersContext)
}

func (s *UnionDeclarationContext) AllUnionFieldDefinition() []IUnionFieldDefinitionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUnionFieldDefinitionContext); ok {
			len++
		}
	}

	tst := make([]IUnionFieldDefinitionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUnionFieldDefinitionContext); ok {
			tst[i] = t.(IUnionFieldDefinitionContext)
			i++
		}
	}

	return tst
}

func (s *UnionDeclarationContext) UnionFieldDefinition(i int) IUnionFieldDefinitionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnionFieldDefinitionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnionFieldDefinitionContext)
}

func (s *UnionDeclarationContext) AllFunctionDefinition() []IFunctionDefinitionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFunctionDefinitionContext); ok {
			len++
		}
	}

	tst := make([]IFunctionDefinitionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFunctionDefinitionContext); ok {
			tst[i] = t.(IFunctionDefinitionContext)
			i++
		}
	}

	return tst
}

func (s *UnionDeclarationContext) FunctionDefinition(i int) IFunctionDefinitionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionDefinitionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionDefinitionContext)
}

func (s *UnionDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnionDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitUnionDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) UnionDeclaration() (localctx IUnionDeclarationContext) {
	localctx = NewUnionDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, ZserioParserRULE_unionDeclaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(379)
		p.Match(ZserioParserUNION)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(380)
		p.Id()
	}
	p.SetState(382)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserLT {
		{
			p.SetState(381)
			p.TemplateParameters()
		}

	}
	p.SetState(385)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserLPAREN {
		{
			p.SetState(384)
			p.TypeParameters()
		}

	}
	{
		p.SetState(387)
		p.Match(ZserioParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(391)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&279918162735005696) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&140746063482881) != 0) {
		{
			p.SetState(388)
			p.UnionFieldDefinition()
		}

		p.SetState(393)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(397)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ZserioParserFUNCTION {
		{
			p.SetState(394)
			p.FunctionDefinition()
		}

		p.SetState(399)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(400)
		p.Match(ZserioParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(401)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnionFieldDefinitionContext is an interface to support dynamic dispatch.
type IUnionFieldDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ChoiceFieldDefinition() IChoiceFieldDefinitionContext
	SEMICOLON() antlr.TerminalNode

	// IsUnionFieldDefinitionContext differentiates from other interfaces.
	IsUnionFieldDefinitionContext()
}

type UnionFieldDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnionFieldDefinitionContext() *UnionFieldDefinitionContext {
	var p = new(UnionFieldDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_unionFieldDefinition
	return p
}

func InitEmptyUnionFieldDefinitionContext(p *UnionFieldDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_unionFieldDefinition
}

func (*UnionFieldDefinitionContext) IsUnionFieldDefinitionContext() {}

func NewUnionFieldDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnionFieldDefinitionContext {
	var p = new(UnionFieldDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_unionFieldDefinition

	return p
}

func (s *UnionFieldDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *UnionFieldDefinitionContext) ChoiceFieldDefinition() IChoiceFieldDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IChoiceFieldDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IChoiceFieldDefinitionContext)
}

func (s *UnionFieldDefinitionContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *UnionFieldDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionFieldDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnionFieldDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitUnionFieldDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) UnionFieldDefinition() (localctx IUnionFieldDefinitionContext) {
	localctx = NewUnionFieldDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, ZserioParserRULE_unionFieldDefinition)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(403)
		p.ChoiceFieldDefinition()
	}
	{
		p.SetState(404)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnumDeclarationContext is an interface to support dynamic dispatch.
type IEnumDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ENUM() antlr.TerminalNode
	TypeInstantiation() ITypeInstantiationContext
	Id() IIdContext
	LBRACE() antlr.TerminalNode
	AllEnumItem() []IEnumItemContext
	EnumItem(i int) IEnumItemContext
	RBRACE() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsEnumDeclarationContext differentiates from other interfaces.
	IsEnumDeclarationContext()
}

type EnumDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumDeclarationContext() *EnumDeclarationContext {
	var p = new(EnumDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_enumDeclaration
	return p
}

func InitEmptyEnumDeclarationContext(p *EnumDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_enumDeclaration
}

func (*EnumDeclarationContext) IsEnumDeclarationContext() {}

func NewEnumDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumDeclarationContext {
	var p = new(EnumDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_enumDeclaration

	return p
}

func (s *EnumDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumDeclarationContext) ENUM() antlr.TerminalNode {
	return s.GetToken(ZserioParserENUM, 0)
}

func (s *EnumDeclarationContext) TypeInstantiation() ITypeInstantiationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeInstantiationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeInstantiationContext)
}

func (s *EnumDeclarationContext) Id() IIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *EnumDeclarationContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(ZserioParserLBRACE, 0)
}

func (s *EnumDeclarationContext) AllEnumItem() []IEnumItemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEnumItemContext); ok {
			len++
		}
	}

	tst := make([]IEnumItemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEnumItemContext); ok {
			tst[i] = t.(IEnumItemContext)
			i++
		}
	}

	return tst
}

func (s *EnumDeclarationContext) EnumItem(i int) IEnumItemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumItemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumItemContext)
}

func (s *EnumDeclarationContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(ZserioParserRBRACE, 0)
}

func (s *EnumDeclarationContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *EnumDeclarationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ZserioParserCOMMA)
}

func (s *EnumDeclarationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ZserioParserCOMMA, i)
}

func (s *EnumDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitEnumDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) EnumDeclaration() (localctx IEnumDeclarationContext) {
	localctx = NewEnumDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, ZserioParserRULE_enumDeclaration)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(406)
		p.Match(ZserioParserENUM)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(407)
		p.TypeInstantiation()
	}
	{
		p.SetState(408)
		p.Id()
	}
	{
		p.SetState(409)
		p.Match(ZserioParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(410)
		p.EnumItem()
	}
	p.SetState(415)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 37, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(411)
				p.Match(ZserioParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(412)
				p.EnumItem()
			}

		}
		p.SetState(417)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 37, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(419)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserCOMMA {
		{
			p.SetState(418)
			p.Match(ZserioParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(421)
		p.Match(ZserioParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(422)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnumItemContext is an interface to support dynamic dispatch.
type IEnumItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Id() IIdContext
	ASSIGN() antlr.TerminalNode
	Expression() IExpressionContext

	// IsEnumItemContext differentiates from other interfaces.
	IsEnumItemContext()
}

type EnumItemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumItemContext() *EnumItemContext {
	var p = new(EnumItemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_enumItem
	return p
}

func InitEmptyEnumItemContext(p *EnumItemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_enumItem
}

func (*EnumItemContext) IsEnumItemContext() {}

func NewEnumItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumItemContext {
	var p = new(EnumItemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_enumItem

	return p
}

func (s *EnumItemContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumItemContext) Id() IIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *EnumItemContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(ZserioParserASSIGN, 0)
}

func (s *EnumItemContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *EnumItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitEnumItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) EnumItem() (localctx IEnumItemContext) {
	localctx = NewEnumItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, ZserioParserRULE_enumItem)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(424)
		p.Id()
	}
	p.SetState(427)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserASSIGN {
		{
			p.SetState(425)
			p.Match(ZserioParserASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(426)
			p.expression(0)
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBitmaskDeclarationContext is an interface to support dynamic dispatch.
type IBitmaskDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BITMASK() antlr.TerminalNode
	TypeInstantiation() ITypeInstantiationContext
	Id() IIdContext
	LBRACE() antlr.TerminalNode
	AllBitmaskValue() []IBitmaskValueContext
	BitmaskValue(i int) IBitmaskValueContext
	RBRACE() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsBitmaskDeclarationContext differentiates from other interfaces.
	IsBitmaskDeclarationContext()
}

type BitmaskDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitmaskDeclarationContext() *BitmaskDeclarationContext {
	var p = new(BitmaskDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_bitmaskDeclaration
	return p
}

func InitEmptyBitmaskDeclarationContext(p *BitmaskDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_bitmaskDeclaration
}

func (*BitmaskDeclarationContext) IsBitmaskDeclarationContext() {}

func NewBitmaskDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitmaskDeclarationContext {
	var p = new(BitmaskDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_bitmaskDeclaration

	return p
}

func (s *BitmaskDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *BitmaskDeclarationContext) BITMASK() antlr.TerminalNode {
	return s.GetToken(ZserioParserBITMASK, 0)
}

func (s *BitmaskDeclarationContext) TypeInstantiation() ITypeInstantiationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeInstantiationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeInstantiationContext)
}

func (s *BitmaskDeclarationContext) Id() IIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *BitmaskDeclarationContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(ZserioParserLBRACE, 0)
}

func (s *BitmaskDeclarationContext) AllBitmaskValue() []IBitmaskValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBitmaskValueContext); ok {
			len++
		}
	}

	tst := make([]IBitmaskValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBitmaskValueContext); ok {
			tst[i] = t.(IBitmaskValueContext)
			i++
		}
	}

	return tst
}

func (s *BitmaskDeclarationContext) BitmaskValue(i int) IBitmaskValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBitmaskValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBitmaskValueContext)
}

func (s *BitmaskDeclarationContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(ZserioParserRBRACE, 0)
}

func (s *BitmaskDeclarationContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *BitmaskDeclarationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ZserioParserCOMMA)
}

func (s *BitmaskDeclarationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ZserioParserCOMMA, i)
}

func (s *BitmaskDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitmaskDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitmaskDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitBitmaskDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) BitmaskDeclaration() (localctx IBitmaskDeclarationContext) {
	localctx = NewBitmaskDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, ZserioParserRULE_bitmaskDeclaration)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(429)
		p.Match(ZserioParserBITMASK)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(430)
		p.TypeInstantiation()
	}
	{
		p.SetState(431)
		p.Id()
	}
	{
		p.SetState(432)
		p.Match(ZserioParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(433)
		p.BitmaskValue()
	}
	p.SetState(438)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 40, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(434)
				p.Match(ZserioParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(435)
				p.BitmaskValue()
			}

		}
		p.SetState(440)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 40, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(442)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserCOMMA {
		{
			p.SetState(441)
			p.Match(ZserioParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(444)
		p.Match(ZserioParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(445)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBitmaskValueContext is an interface to support dynamic dispatch.
type IBitmaskValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Id() IIdContext
	ASSIGN() antlr.TerminalNode
	Expression() IExpressionContext

	// IsBitmaskValueContext differentiates from other interfaces.
	IsBitmaskValueContext()
}

type BitmaskValueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBitmaskValueContext() *BitmaskValueContext {
	var p = new(BitmaskValueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_bitmaskValue
	return p
}

func InitEmptyBitmaskValueContext(p *BitmaskValueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_bitmaskValue
}

func (*BitmaskValueContext) IsBitmaskValueContext() {}

func NewBitmaskValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BitmaskValueContext {
	var p = new(BitmaskValueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_bitmaskValue

	return p
}

func (s *BitmaskValueContext) GetParser() antlr.Parser { return s.parser }

func (s *BitmaskValueContext) Id() IIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *BitmaskValueContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(ZserioParserASSIGN, 0)
}

func (s *BitmaskValueContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BitmaskValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitmaskValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BitmaskValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitBitmaskValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) BitmaskValue() (localctx IBitmaskValueContext) {
	localctx = NewBitmaskValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, ZserioParserRULE_bitmaskValue)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(447)
		p.Id()
	}
	p.SetState(450)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserASSIGN {
		{
			p.SetState(448)
			p.Match(ZserioParserASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(449)
			p.expression(0)
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISqlTableDeclarationContext is an interface to support dynamic dispatch.
type ISqlTableDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SQL_TABLE() antlr.TerminalNode
	AllId() []IIdContext
	Id(i int) IIdContext
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode
	TemplateParameters() ITemplateParametersContext
	USING() antlr.TerminalNode
	AllSqlTableFieldDefinition() []ISqlTableFieldDefinitionContext
	SqlTableFieldDefinition(i int) ISqlTableFieldDefinitionContext
	SqlConstraintDefinition() ISqlConstraintDefinitionContext
	SqlWithoutRowId() ISqlWithoutRowIdContext

	// IsSqlTableDeclarationContext differentiates from other interfaces.
	IsSqlTableDeclarationContext()
}

type SqlTableDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySqlTableDeclarationContext() *SqlTableDeclarationContext {
	var p = new(SqlTableDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_sqlTableDeclaration
	return p
}

func InitEmptySqlTableDeclarationContext(p *SqlTableDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_sqlTableDeclaration
}

func (*SqlTableDeclarationContext) IsSqlTableDeclarationContext() {}

func NewSqlTableDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SqlTableDeclarationContext {
	var p = new(SqlTableDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_sqlTableDeclaration

	return p
}

func (s *SqlTableDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *SqlTableDeclarationContext) SQL_TABLE() antlr.TerminalNode {
	return s.GetToken(ZserioParserSQL_TABLE, 0)
}

func (s *SqlTableDeclarationContext) AllId() []IIdContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdContext); ok {
			len++
		}
	}

	tst := make([]IIdContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdContext); ok {
			tst[i] = t.(IIdContext)
			i++
		}
	}

	return tst
}

func (s *SqlTableDeclarationContext) Id(i int) IIdContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *SqlTableDeclarationContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(ZserioParserLBRACE, 0)
}

func (s *SqlTableDeclarationContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(ZserioParserRBRACE, 0)
}

func (s *SqlTableDeclarationContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *SqlTableDeclarationContext) TemplateParameters() ITemplateParametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateParametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateParametersContext)
}

func (s *SqlTableDeclarationContext) USING() antlr.TerminalNode {
	return s.GetToken(ZserioParserUSING, 0)
}

func (s *SqlTableDeclarationContext) AllSqlTableFieldDefinition() []ISqlTableFieldDefinitionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISqlTableFieldDefinitionContext); ok {
			len++
		}
	}

	tst := make([]ISqlTableFieldDefinitionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISqlTableFieldDefinitionContext); ok {
			tst[i] = t.(ISqlTableFieldDefinitionContext)
			i++
		}
	}

	return tst
}

func (s *SqlTableDeclarationContext) SqlTableFieldDefinition(i int) ISqlTableFieldDefinitionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISqlTableFieldDefinitionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISqlTableFieldDefinitionContext)
}

func (s *SqlTableDeclarationContext) SqlConstraintDefinition() ISqlConstraintDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISqlConstraintDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISqlConstraintDefinitionContext)
}

func (s *SqlTableDeclarationContext) SqlWithoutRowId() ISqlWithoutRowIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISqlWithoutRowIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISqlWithoutRowIdContext)
}

func (s *SqlTableDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SqlTableDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SqlTableDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitSqlTableDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) SqlTableDeclaration() (localctx ISqlTableDeclarationContext) {
	localctx = NewSqlTableDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, ZserioParserRULE_sqlTableDeclaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(452)
		p.Match(ZserioParserSQL_TABLE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(453)
		p.Id()
	}
	p.SetState(455)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserLT {
		{
			p.SetState(454)
			p.TemplateParameters()
		}

	}
	p.SetState(459)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserUSING {
		{
			p.SetState(457)
			p.Match(ZserioParserUSING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(458)
			p.Id()
		}

	}
	{
		p.SetState(461)
		p.Match(ZserioParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(465)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&279355212781584384) != 0) || ((int64((_la-74)) & ^0x3f) == 0 && ((int64(1)<<(_la-74))&137447327621) != 0) {
		{
			p.SetState(462)
			p.SqlTableFieldDefinition()
		}

		p.SetState(467)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(469)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserSQL {
		{
			p.SetState(468)
			p.SqlConstraintDefinition()
		}

	}
	p.SetState(472)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserSQL_WITHOUT_ROWID {
		{
			p.SetState(471)
			p.SqlWithoutRowId()
		}

	}
	{
		p.SetState(474)
		p.Match(ZserioParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(475)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISqlTableFieldDefinitionContext is an interface to support dynamic dispatch.
type ISqlTableFieldDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TypeInstantiation() ITypeInstantiationContext
	Id() IIdContext
	SEMICOLON() antlr.TerminalNode
	SQL_VIRTUAL() antlr.TerminalNode
	SqlConstraint() ISqlConstraintContext

	// IsSqlTableFieldDefinitionContext differentiates from other interfaces.
	IsSqlTableFieldDefinitionContext()
}

type SqlTableFieldDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySqlTableFieldDefinitionContext() *SqlTableFieldDefinitionContext {
	var p = new(SqlTableFieldDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_sqlTableFieldDefinition
	return p
}

func InitEmptySqlTableFieldDefinitionContext(p *SqlTableFieldDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_sqlTableFieldDefinition
}

func (*SqlTableFieldDefinitionContext) IsSqlTableFieldDefinitionContext() {}

func NewSqlTableFieldDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SqlTableFieldDefinitionContext {
	var p = new(SqlTableFieldDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_sqlTableFieldDefinition

	return p
}

func (s *SqlTableFieldDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *SqlTableFieldDefinitionContext) TypeInstantiation() ITypeInstantiationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeInstantiationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeInstantiationContext)
}

func (s *SqlTableFieldDefinitionContext) Id() IIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *SqlTableFieldDefinitionContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *SqlTableFieldDefinitionContext) SQL_VIRTUAL() antlr.TerminalNode {
	return s.GetToken(ZserioParserSQL_VIRTUAL, 0)
}

func (s *SqlTableFieldDefinitionContext) SqlConstraint() ISqlConstraintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISqlConstraintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISqlConstraintContext)
}

func (s *SqlTableFieldDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SqlTableFieldDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SqlTableFieldDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitSqlTableFieldDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) SqlTableFieldDefinition() (localctx ISqlTableFieldDefinitionContext) {
	localctx = NewSqlTableFieldDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, ZserioParserRULE_sqlTableFieldDefinition)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(478)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserSQL_VIRTUAL {
		{
			p.SetState(477)
			p.Match(ZserioParserSQL_VIRTUAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(480)
		p.TypeInstantiation()
	}
	{
		p.SetState(481)
		p.Id()
	}
	p.SetState(483)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserSQL {
		{
			p.SetState(482)
			p.SqlConstraint()
		}

	}
	{
		p.SetState(485)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISqlConstraintDefinitionContext is an interface to support dynamic dispatch.
type ISqlConstraintDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SqlConstraint() ISqlConstraintContext
	SEMICOLON() antlr.TerminalNode

	// IsSqlConstraintDefinitionContext differentiates from other interfaces.
	IsSqlConstraintDefinitionContext()
}

type SqlConstraintDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySqlConstraintDefinitionContext() *SqlConstraintDefinitionContext {
	var p = new(SqlConstraintDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_sqlConstraintDefinition
	return p
}

func InitEmptySqlConstraintDefinitionContext(p *SqlConstraintDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_sqlConstraintDefinition
}

func (*SqlConstraintDefinitionContext) IsSqlConstraintDefinitionContext() {}

func NewSqlConstraintDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SqlConstraintDefinitionContext {
	var p = new(SqlConstraintDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_sqlConstraintDefinition

	return p
}

func (s *SqlConstraintDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *SqlConstraintDefinitionContext) SqlConstraint() ISqlConstraintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISqlConstraintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISqlConstraintContext)
}

func (s *SqlConstraintDefinitionContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *SqlConstraintDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SqlConstraintDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SqlConstraintDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitSqlConstraintDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) SqlConstraintDefinition() (localctx ISqlConstraintDefinitionContext) {
	localctx = NewSqlConstraintDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, ZserioParserRULE_sqlConstraintDefinition)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(487)
		p.SqlConstraint()
	}
	{
		p.SetState(488)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISqlConstraintContext is an interface to support dynamic dispatch.
type ISqlConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SQL() antlr.TerminalNode
	Expression() IExpressionContext

	// IsSqlConstraintContext differentiates from other interfaces.
	IsSqlConstraintContext()
}

type SqlConstraintContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySqlConstraintContext() *SqlConstraintContext {
	var p = new(SqlConstraintContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_sqlConstraint
	return p
}

func InitEmptySqlConstraintContext(p *SqlConstraintContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_sqlConstraint
}

func (*SqlConstraintContext) IsSqlConstraintContext() {}

func NewSqlConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SqlConstraintContext {
	var p = new(SqlConstraintContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_sqlConstraint

	return p
}

func (s *SqlConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *SqlConstraintContext) SQL() antlr.TerminalNode {
	return s.GetToken(ZserioParserSQL, 0)
}

func (s *SqlConstraintContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SqlConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SqlConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SqlConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitSqlConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) SqlConstraint() (localctx ISqlConstraintContext) {
	localctx = NewSqlConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, ZserioParserRULE_sqlConstraint)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(490)
		p.Match(ZserioParserSQL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(491)
		p.expression(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISqlWithoutRowIdContext is an interface to support dynamic dispatch.
type ISqlWithoutRowIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SQL_WITHOUT_ROWID() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode

	// IsSqlWithoutRowIdContext differentiates from other interfaces.
	IsSqlWithoutRowIdContext()
}

type SqlWithoutRowIdContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySqlWithoutRowIdContext() *SqlWithoutRowIdContext {
	var p = new(SqlWithoutRowIdContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_sqlWithoutRowId
	return p
}

func InitEmptySqlWithoutRowIdContext(p *SqlWithoutRowIdContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_sqlWithoutRowId
}

func (*SqlWithoutRowIdContext) IsSqlWithoutRowIdContext() {}

func NewSqlWithoutRowIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SqlWithoutRowIdContext {
	var p = new(SqlWithoutRowIdContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_sqlWithoutRowId

	return p
}

func (s *SqlWithoutRowIdContext) GetParser() antlr.Parser { return s.parser }

func (s *SqlWithoutRowIdContext) SQL_WITHOUT_ROWID() antlr.TerminalNode {
	return s.GetToken(ZserioParserSQL_WITHOUT_ROWID, 0)
}

func (s *SqlWithoutRowIdContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *SqlWithoutRowIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SqlWithoutRowIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SqlWithoutRowIdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitSqlWithoutRowId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) SqlWithoutRowId() (localctx ISqlWithoutRowIdContext) {
	localctx = NewSqlWithoutRowIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, ZserioParserRULE_sqlWithoutRowId)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(493)
		p.Match(ZserioParserSQL_WITHOUT_ROWID)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(494)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISqlDatabaseDefinitionContext is an interface to support dynamic dispatch.
type ISqlDatabaseDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SQL_DATABASE() antlr.TerminalNode
	Id() IIdContext
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode
	AllSqlDatabaseFieldDefinition() []ISqlDatabaseFieldDefinitionContext
	SqlDatabaseFieldDefinition(i int) ISqlDatabaseFieldDefinitionContext

	// IsSqlDatabaseDefinitionContext differentiates from other interfaces.
	IsSqlDatabaseDefinitionContext()
}

type SqlDatabaseDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySqlDatabaseDefinitionContext() *SqlDatabaseDefinitionContext {
	var p = new(SqlDatabaseDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_sqlDatabaseDefinition
	return p
}

func InitEmptySqlDatabaseDefinitionContext(p *SqlDatabaseDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_sqlDatabaseDefinition
}

func (*SqlDatabaseDefinitionContext) IsSqlDatabaseDefinitionContext() {}

func NewSqlDatabaseDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SqlDatabaseDefinitionContext {
	var p = new(SqlDatabaseDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_sqlDatabaseDefinition

	return p
}

func (s *SqlDatabaseDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *SqlDatabaseDefinitionContext) SQL_DATABASE() antlr.TerminalNode {
	return s.GetToken(ZserioParserSQL_DATABASE, 0)
}

func (s *SqlDatabaseDefinitionContext) Id() IIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *SqlDatabaseDefinitionContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(ZserioParserLBRACE, 0)
}

func (s *SqlDatabaseDefinitionContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(ZserioParserRBRACE, 0)
}

func (s *SqlDatabaseDefinitionContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *SqlDatabaseDefinitionContext) AllSqlDatabaseFieldDefinition() []ISqlDatabaseFieldDefinitionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISqlDatabaseFieldDefinitionContext); ok {
			len++
		}
	}

	tst := make([]ISqlDatabaseFieldDefinitionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISqlDatabaseFieldDefinitionContext); ok {
			tst[i] = t.(ISqlDatabaseFieldDefinitionContext)
			i++
		}
	}

	return tst
}

func (s *SqlDatabaseDefinitionContext) SqlDatabaseFieldDefinition(i int) ISqlDatabaseFieldDefinitionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISqlDatabaseFieldDefinitionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISqlDatabaseFieldDefinitionContext)
}

func (s *SqlDatabaseDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SqlDatabaseDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SqlDatabaseDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitSqlDatabaseDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) SqlDatabaseDefinition() (localctx ISqlDatabaseDefinitionContext) {
	localctx = NewSqlDatabaseDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, ZserioParserRULE_sqlDatabaseDefinition)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(496)
		p.Match(ZserioParserSQL_DATABASE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(497)
		p.Id()
	}
	{
		p.SetState(498)
		p.Match(ZserioParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(500)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&279355212781584384) != 0) || ((int64((_la-76)) & ^0x3f) == 0 && ((int64(1)<<(_la-76))&34361831905) != 0) {
		{
			p.SetState(499)
			p.SqlDatabaseFieldDefinition()
		}

		p.SetState(502)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(504)
		p.Match(ZserioParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(505)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISqlDatabaseFieldDefinitionContext is an interface to support dynamic dispatch.
type ISqlDatabaseFieldDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TypeInstantiation() ITypeInstantiationContext
	Id() IIdContext
	SEMICOLON() antlr.TerminalNode

	// IsSqlDatabaseFieldDefinitionContext differentiates from other interfaces.
	IsSqlDatabaseFieldDefinitionContext()
}

type SqlDatabaseFieldDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySqlDatabaseFieldDefinitionContext() *SqlDatabaseFieldDefinitionContext {
	var p = new(SqlDatabaseFieldDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_sqlDatabaseFieldDefinition
	return p
}

func InitEmptySqlDatabaseFieldDefinitionContext(p *SqlDatabaseFieldDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_sqlDatabaseFieldDefinition
}

func (*SqlDatabaseFieldDefinitionContext) IsSqlDatabaseFieldDefinitionContext() {}

func NewSqlDatabaseFieldDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SqlDatabaseFieldDefinitionContext {
	var p = new(SqlDatabaseFieldDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_sqlDatabaseFieldDefinition

	return p
}

func (s *SqlDatabaseFieldDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *SqlDatabaseFieldDefinitionContext) TypeInstantiation() ITypeInstantiationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeInstantiationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeInstantiationContext)
}

func (s *SqlDatabaseFieldDefinitionContext) Id() IIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *SqlDatabaseFieldDefinitionContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *SqlDatabaseFieldDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SqlDatabaseFieldDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SqlDatabaseFieldDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitSqlDatabaseFieldDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) SqlDatabaseFieldDefinition() (localctx ISqlDatabaseFieldDefinitionContext) {
	localctx = NewSqlDatabaseFieldDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, ZserioParserRULE_sqlDatabaseFieldDefinition)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(507)
		p.TypeInstantiation()
	}
	{
		p.SetState(508)
		p.Id()
	}
	{
		p.SetState(509)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IServiceDefinitionContext is an interface to support dynamic dispatch.
type IServiceDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SERVICE() antlr.TerminalNode
	Id() IIdContext
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode
	AllServiceMethodDefinition() []IServiceMethodDefinitionContext
	ServiceMethodDefinition(i int) IServiceMethodDefinitionContext

	// IsServiceDefinitionContext differentiates from other interfaces.
	IsServiceDefinitionContext()
}

type ServiceDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyServiceDefinitionContext() *ServiceDefinitionContext {
	var p = new(ServiceDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_serviceDefinition
	return p
}

func InitEmptyServiceDefinitionContext(p *ServiceDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_serviceDefinition
}

func (*ServiceDefinitionContext) IsServiceDefinitionContext() {}

func NewServiceDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ServiceDefinitionContext {
	var p = new(ServiceDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_serviceDefinition

	return p
}

func (s *ServiceDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ServiceDefinitionContext) SERVICE() antlr.TerminalNode {
	return s.GetToken(ZserioParserSERVICE, 0)
}

func (s *ServiceDefinitionContext) Id() IIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ServiceDefinitionContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(ZserioParserLBRACE, 0)
}

func (s *ServiceDefinitionContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(ZserioParserRBRACE, 0)
}

func (s *ServiceDefinitionContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *ServiceDefinitionContext) AllServiceMethodDefinition() []IServiceMethodDefinitionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IServiceMethodDefinitionContext); ok {
			len++
		}
	}

	tst := make([]IServiceMethodDefinitionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IServiceMethodDefinitionContext); ok {
			tst[i] = t.(IServiceMethodDefinitionContext)
			i++
		}
	}

	return tst
}

func (s *ServiceDefinitionContext) ServiceMethodDefinition(i int) IServiceMethodDefinitionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IServiceMethodDefinitionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IServiceMethodDefinitionContext)
}

func (s *ServiceDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ServiceDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ServiceDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitServiceDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) ServiceDefinition() (localctx IServiceDefinitionContext) {
	localctx = NewServiceDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, ZserioParserRULE_serviceDefinition)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(511)
		p.Match(ZserioParserSERVICE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(512)
		p.Id()
	}
	{
		p.SetState(513)
		p.Match(ZserioParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(517)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&279355212781584384) != 0) || ((int64((_la-76)) & ^0x3f) == 0 && ((int64(1)<<(_la-76))&34361831905) != 0) {
		{
			p.SetState(514)
			p.ServiceMethodDefinition()
		}

		p.SetState(519)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(520)
		p.Match(ZserioParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(521)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IServiceMethodDefinitionContext is an interface to support dynamic dispatch.
type IServiceMethodDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllTypeReference() []ITypeReferenceContext
	TypeReference(i int) ITypeReferenceContext
	Id() IIdContext
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode

	// IsServiceMethodDefinitionContext differentiates from other interfaces.
	IsServiceMethodDefinitionContext()
}

type ServiceMethodDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyServiceMethodDefinitionContext() *ServiceMethodDefinitionContext {
	var p = new(ServiceMethodDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_serviceMethodDefinition
	return p
}

func InitEmptyServiceMethodDefinitionContext(p *ServiceMethodDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_serviceMethodDefinition
}

func (*ServiceMethodDefinitionContext) IsServiceMethodDefinitionContext() {}

func NewServiceMethodDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ServiceMethodDefinitionContext {
	var p = new(ServiceMethodDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_serviceMethodDefinition

	return p
}

func (s *ServiceMethodDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ServiceMethodDefinitionContext) AllTypeReference() []ITypeReferenceContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeReferenceContext); ok {
			len++
		}
	}

	tst := make([]ITypeReferenceContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeReferenceContext); ok {
			tst[i] = t.(ITypeReferenceContext)
			i++
		}
	}

	return tst
}

func (s *ServiceMethodDefinitionContext) TypeReference(i int) ITypeReferenceContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeReferenceContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeReferenceContext)
}

func (s *ServiceMethodDefinitionContext) Id() IIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ServiceMethodDefinitionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserLPAREN, 0)
}

func (s *ServiceMethodDefinitionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserRPAREN, 0)
}

func (s *ServiceMethodDefinitionContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *ServiceMethodDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ServiceMethodDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ServiceMethodDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitServiceMethodDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) ServiceMethodDefinition() (localctx IServiceMethodDefinitionContext) {
	localctx = NewServiceMethodDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, ZserioParserRULE_serviceMethodDefinition)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(523)
		p.TypeReference()
	}
	{
		p.SetState(524)
		p.Id()
	}
	{
		p.SetState(525)
		p.Match(ZserioParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(526)
		p.TypeReference()
	}
	{
		p.SetState(527)
		p.Match(ZserioParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(528)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPubsubDefinitionContext is an interface to support dynamic dispatch.
type IPubsubDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PUBSUB() antlr.TerminalNode
	Id() IIdContext
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	SEMICOLON() antlr.TerminalNode
	AllPubsubMessageDefinition() []IPubsubMessageDefinitionContext
	PubsubMessageDefinition(i int) IPubsubMessageDefinitionContext

	// IsPubsubDefinitionContext differentiates from other interfaces.
	IsPubsubDefinitionContext()
}

type PubsubDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPubsubDefinitionContext() *PubsubDefinitionContext {
	var p = new(PubsubDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_pubsubDefinition
	return p
}

func InitEmptyPubsubDefinitionContext(p *PubsubDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_pubsubDefinition
}

func (*PubsubDefinitionContext) IsPubsubDefinitionContext() {}

func NewPubsubDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PubsubDefinitionContext {
	var p = new(PubsubDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_pubsubDefinition

	return p
}

func (s *PubsubDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *PubsubDefinitionContext) PUBSUB() antlr.TerminalNode {
	return s.GetToken(ZserioParserPUBSUB, 0)
}

func (s *PubsubDefinitionContext) Id() IIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PubsubDefinitionContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(ZserioParserLBRACE, 0)
}

func (s *PubsubDefinitionContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(ZserioParserRBRACE, 0)
}

func (s *PubsubDefinitionContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *PubsubDefinitionContext) AllPubsubMessageDefinition() []IPubsubMessageDefinitionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPubsubMessageDefinitionContext); ok {
			len++
		}
	}

	tst := make([]IPubsubMessageDefinitionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPubsubMessageDefinitionContext); ok {
			tst[i] = t.(IPubsubMessageDefinitionContext)
			i++
		}
	}

	return tst
}

func (s *PubsubDefinitionContext) PubsubMessageDefinition(i int) IPubsubMessageDefinitionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPubsubMessageDefinitionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPubsubMessageDefinitionContext)
}

func (s *PubsubDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PubsubDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PubsubDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitPubsubDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) PubsubDefinition() (localctx IPubsubDefinitionContext) {
	localctx = NewPubsubDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, ZserioParserRULE_pubsubDefinition)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(530)
		p.Match(ZserioParserPUBSUB)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(531)
		p.Id()
	}
	{
		p.SetState(532)
		p.Match(ZserioParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(536)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-66)) & ^0x3f) == 0 && ((int64(1)<<(_la-66))&20481) != 0 {
		{
			p.SetState(533)
			p.PubsubMessageDefinition()
		}

		p.SetState(538)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(539)
		p.Match(ZserioParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(540)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPubsubMessageDefinitionContext is an interface to support dynamic dispatch.
type IPubsubMessageDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TopicDefinition() ITopicDefinitionContext
	TypeReference() ITypeReferenceContext
	Id() IIdContext
	SEMICOLON() antlr.TerminalNode

	// IsPubsubMessageDefinitionContext differentiates from other interfaces.
	IsPubsubMessageDefinitionContext()
}

type PubsubMessageDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPubsubMessageDefinitionContext() *PubsubMessageDefinitionContext {
	var p = new(PubsubMessageDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_pubsubMessageDefinition
	return p
}

func InitEmptyPubsubMessageDefinitionContext(p *PubsubMessageDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_pubsubMessageDefinition
}

func (*PubsubMessageDefinitionContext) IsPubsubMessageDefinitionContext() {}

func NewPubsubMessageDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PubsubMessageDefinitionContext {
	var p = new(PubsubMessageDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_pubsubMessageDefinition

	return p
}

func (s *PubsubMessageDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *PubsubMessageDefinitionContext) TopicDefinition() ITopicDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITopicDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITopicDefinitionContext)
}

func (s *PubsubMessageDefinitionContext) TypeReference() ITypeReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeReferenceContext)
}

func (s *PubsubMessageDefinitionContext) Id() IIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *PubsubMessageDefinitionContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *PubsubMessageDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PubsubMessageDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PubsubMessageDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitPubsubMessageDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) PubsubMessageDefinition() (localctx IPubsubMessageDefinitionContext) {
	localctx = NewPubsubMessageDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, ZserioParserRULE_pubsubMessageDefinition)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(542)
		p.TopicDefinition()
	}
	{
		p.SetState(543)
		p.TypeReference()
	}
	{
		p.SetState(544)
		p.Id()
	}
	{
		p.SetState(545)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITopicDefinitionContext is an interface to support dynamic dispatch.
type ITopicDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TOPIC() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	Expression() IExpressionContext
	RPAREN() antlr.TerminalNode
	PUBLISH() antlr.TerminalNode
	SUBSCRIBE() antlr.TerminalNode

	// IsTopicDefinitionContext differentiates from other interfaces.
	IsTopicDefinitionContext()
}

type TopicDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTopicDefinitionContext() *TopicDefinitionContext {
	var p = new(TopicDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_topicDefinition
	return p
}

func InitEmptyTopicDefinitionContext(p *TopicDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_topicDefinition
}

func (*TopicDefinitionContext) IsTopicDefinitionContext() {}

func NewTopicDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TopicDefinitionContext {
	var p = new(TopicDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_topicDefinition

	return p
}

func (s *TopicDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *TopicDefinitionContext) TOPIC() antlr.TerminalNode {
	return s.GetToken(ZserioParserTOPIC, 0)
}

func (s *TopicDefinitionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserLPAREN, 0)
}

func (s *TopicDefinitionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TopicDefinitionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserRPAREN, 0)
}

func (s *TopicDefinitionContext) PUBLISH() antlr.TerminalNode {
	return s.GetToken(ZserioParserPUBLISH, 0)
}

func (s *TopicDefinitionContext) SUBSCRIBE() antlr.TerminalNode {
	return s.GetToken(ZserioParserSUBSCRIBE, 0)
}

func (s *TopicDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TopicDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TopicDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitTopicDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) TopicDefinition() (localctx ITopicDefinitionContext) {
	localctx = NewTopicDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, ZserioParserRULE_topicDefinition)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(548)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == ZserioParserPUBLISH || _la == ZserioParserSUBSCRIBE {
		{
			p.SetState(547)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ZserioParserPUBLISH || _la == ZserioParserSUBSCRIBE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(550)
		p.Match(ZserioParserTOPIC)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(551)
		p.Match(ZserioParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(552)
		p.expression(0)
	}
	{
		p.SetState(553)
		p.Match(ZserioParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunctionDefinitionContext is an interface to support dynamic dispatch.
type IFunctionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FUNCTION() antlr.TerminalNode
	FunctionType() IFunctionTypeContext
	FunctionName() IFunctionNameContext
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	FunctionBody() IFunctionBodyContext

	// IsFunctionDefinitionContext differentiates from other interfaces.
	IsFunctionDefinitionContext()
}

type FunctionDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDefinitionContext() *FunctionDefinitionContext {
	var p = new(FunctionDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_functionDefinition
	return p
}

func InitEmptyFunctionDefinitionContext(p *FunctionDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_functionDefinition
}

func (*FunctionDefinitionContext) IsFunctionDefinitionContext() {}

func NewFunctionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDefinitionContext {
	var p = new(FunctionDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_functionDefinition

	return p
}

func (s *FunctionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDefinitionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(ZserioParserFUNCTION, 0)
}

func (s *FunctionDefinitionContext) FunctionType() IFunctionTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeContext)
}

func (s *FunctionDefinitionContext) FunctionName() IFunctionNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionNameContext)
}

func (s *FunctionDefinitionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserLPAREN, 0)
}

func (s *FunctionDefinitionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserRPAREN, 0)
}

func (s *FunctionDefinitionContext) FunctionBody() IFunctionBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *FunctionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitFunctionDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) FunctionDefinition() (localctx IFunctionDefinitionContext) {
	localctx = NewFunctionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, ZserioParserRULE_functionDefinition)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(555)
		p.Match(ZserioParserFUNCTION)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(556)
		p.FunctionType()
	}
	{
		p.SetState(557)
		p.FunctionName()
	}
	{
		p.SetState(558)
		p.Match(ZserioParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(559)
		p.Match(ZserioParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(560)
		p.FunctionBody()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunctionTypeContext is an interface to support dynamic dispatch.
type IFunctionTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TypeReference() ITypeReferenceContext

	// IsFunctionTypeContext differentiates from other interfaces.
	IsFunctionTypeContext()
}

type FunctionTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeContext() *FunctionTypeContext {
	var p = new(FunctionTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_functionType
	return p
}

func InitEmptyFunctionTypeContext(p *FunctionTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_functionType
}

func (*FunctionTypeContext) IsFunctionTypeContext() {}

func NewFunctionTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeContext {
	var p = new(FunctionTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_functionType

	return p
}

func (s *FunctionTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeContext) TypeReference() ITypeReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeReferenceContext)
}

func (s *FunctionTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitFunctionType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) FunctionType() (localctx IFunctionTypeContext) {
	localctx = NewFunctionTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, ZserioParserRULE_functionType)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(562)
		p.TypeReference()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunctionNameContext is an interface to support dynamic dispatch.
type IFunctionNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Id() IIdContext

	// IsFunctionNameContext differentiates from other interfaces.
	IsFunctionNameContext()
}

type FunctionNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionNameContext() *FunctionNameContext {
	var p = new(FunctionNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_functionName
	return p
}

func InitEmptyFunctionNameContext(p *FunctionNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_functionName
}

func (*FunctionNameContext) IsFunctionNameContext() {}

func NewFunctionNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionNameContext {
	var p = new(FunctionNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_functionName

	return p
}

func (s *FunctionNameContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionNameContext) Id() IIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *FunctionNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitFunctionName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) FunctionName() (localctx IFunctionNameContext) {
	localctx = NewFunctionNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, ZserioParserRULE_functionName)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(564)
		p.Id()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunctionBodyContext is an interface to support dynamic dispatch.
type IFunctionBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LBRACE() antlr.TerminalNode
	RETURN() antlr.TerminalNode
	Expression() IExpressionContext
	SEMICOLON() antlr.TerminalNode
	RBRACE() antlr.TerminalNode

	// IsFunctionBodyContext differentiates from other interfaces.
	IsFunctionBodyContext()
}

type FunctionBodyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionBodyContext() *FunctionBodyContext {
	var p = new(FunctionBodyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_functionBody
	return p
}

func InitEmptyFunctionBodyContext(p *FunctionBodyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_functionBody
}

func (*FunctionBodyContext) IsFunctionBodyContext() {}

func NewFunctionBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionBodyContext {
	var p = new(FunctionBodyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_functionBody

	return p
}

func (s *FunctionBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionBodyContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(ZserioParserLBRACE, 0)
}

func (s *FunctionBodyContext) RETURN() antlr.TerminalNode {
	return s.GetToken(ZserioParserRETURN, 0)
}

func (s *FunctionBodyContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FunctionBodyContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *FunctionBodyContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(ZserioParserRBRACE, 0)
}

func (s *FunctionBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitFunctionBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) FunctionBody() (localctx IFunctionBodyContext) {
	localctx = NewFunctionBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, ZserioParserRULE_functionBody)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(566)
		p.Match(ZserioParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(567)
		p.Match(ZserioParserRETURN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(568)
		p.expression(0)
	}
	{
		p.SetState(569)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(570)
		p.Match(ZserioParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeParametersContext is an interface to support dynamic dispatch.
type ITypeParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LPAREN() antlr.TerminalNode
	AllParameterDefinition() []IParameterDefinitionContext
	ParameterDefinition(i int) IParameterDefinitionContext
	RPAREN() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsTypeParametersContext differentiates from other interfaces.
	IsTypeParametersContext()
}

type TypeParametersContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeParametersContext() *TypeParametersContext {
	var p = new(TypeParametersContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_typeParameters
	return p
}

func InitEmptyTypeParametersContext(p *TypeParametersContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_typeParameters
}

func (*TypeParametersContext) IsTypeParametersContext() {}

func NewTypeParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeParametersContext {
	var p = new(TypeParametersContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_typeParameters

	return p
}

func (s *TypeParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeParametersContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserLPAREN, 0)
}

func (s *TypeParametersContext) AllParameterDefinition() []IParameterDefinitionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IParameterDefinitionContext); ok {
			len++
		}
	}

	tst := make([]IParameterDefinitionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IParameterDefinitionContext); ok {
			tst[i] = t.(IParameterDefinitionContext)
			i++
		}
	}

	return tst
}

func (s *TypeParametersContext) ParameterDefinition(i int) IParameterDefinitionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParameterDefinitionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParameterDefinitionContext)
}

func (s *TypeParametersContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserRPAREN, 0)
}

func (s *TypeParametersContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ZserioParserCOMMA)
}

func (s *TypeParametersContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ZserioParserCOMMA, i)
}

func (s *TypeParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeParametersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitTypeParameters(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) TypeParameters() (localctx ITypeParametersContext) {
	localctx = NewTypeParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, ZserioParserRULE_typeParameters)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(572)
		p.Match(ZserioParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(573)
		p.ParameterDefinition()
	}
	p.SetState(578)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ZserioParserCOMMA {
		{
			p.SetState(574)
			p.Match(ZserioParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(575)
			p.ParameterDefinition()
		}

		p.SetState(580)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(581)
		p.Match(ZserioParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IParameterDefinitionContext is an interface to support dynamic dispatch.
type IParameterDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TypeReference() ITypeReferenceContext
	Id() IIdContext

	// IsParameterDefinitionContext differentiates from other interfaces.
	IsParameterDefinitionContext()
}

type ParameterDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterDefinitionContext() *ParameterDefinitionContext {
	var p = new(ParameterDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_parameterDefinition
	return p
}

func InitEmptyParameterDefinitionContext(p *ParameterDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_parameterDefinition
}

func (*ParameterDefinitionContext) IsParameterDefinitionContext() {}

func NewParameterDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterDefinitionContext {
	var p = new(ParameterDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_parameterDefinition

	return p
}

func (s *ParameterDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterDefinitionContext) TypeReference() ITypeReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeReferenceContext)
}

func (s *ParameterDefinitionContext) Id() IIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ParameterDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitParameterDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) ParameterDefinition() (localctx IParameterDefinitionContext) {
	localctx = NewParameterDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, ZserioParserRULE_parameterDefinition)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(583)
		p.TypeReference()
	}
	{
		p.SetState(584)
		p.Id()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITemplateParametersContext is an interface to support dynamic dispatch.
type ITemplateParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LT() antlr.TerminalNode
	AllId() []IIdContext
	Id(i int) IIdContext
	GT() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsTemplateParametersContext differentiates from other interfaces.
	IsTemplateParametersContext()
}

type TemplateParametersContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateParametersContext() *TemplateParametersContext {
	var p = new(TemplateParametersContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_templateParameters
	return p
}

func InitEmptyTemplateParametersContext(p *TemplateParametersContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_templateParameters
}

func (*TemplateParametersContext) IsTemplateParametersContext() {}

func NewTemplateParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateParametersContext {
	var p = new(TemplateParametersContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_templateParameters

	return p
}

func (s *TemplateParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateParametersContext) LT() antlr.TerminalNode {
	return s.GetToken(ZserioParserLT, 0)
}

func (s *TemplateParametersContext) AllId() []IIdContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdContext); ok {
			len++
		}
	}

	tst := make([]IIdContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdContext); ok {
			tst[i] = t.(IIdContext)
			i++
		}
	}

	return tst
}

func (s *TemplateParametersContext) Id(i int) IIdContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *TemplateParametersContext) GT() antlr.TerminalNode {
	return s.GetToken(ZserioParserGT, 0)
}

func (s *TemplateParametersContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ZserioParserCOMMA)
}

func (s *TemplateParametersContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ZserioParserCOMMA, i)
}

func (s *TemplateParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateParametersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitTemplateParameters(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) TemplateParameters() (localctx ITemplateParametersContext) {
	localctx = NewTemplateParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, ZserioParserRULE_templateParameters)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(586)
		p.Match(ZserioParserLT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(587)
		p.Id()
	}
	p.SetState(592)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ZserioParserCOMMA {
		{
			p.SetState(588)
			p.Match(ZserioParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(589)
			p.Id()
		}

		p.SetState(594)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(595)
		p.Match(ZserioParserGT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITemplateArgumentsContext is an interface to support dynamic dispatch.
type ITemplateArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LT() antlr.TerminalNode
	AllTemplateArgument() []ITemplateArgumentContext
	TemplateArgument(i int) ITemplateArgumentContext
	GT() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsTemplateArgumentsContext differentiates from other interfaces.
	IsTemplateArgumentsContext()
}

type TemplateArgumentsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateArgumentsContext() *TemplateArgumentsContext {
	var p = new(TemplateArgumentsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_templateArguments
	return p
}

func InitEmptyTemplateArgumentsContext(p *TemplateArgumentsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_templateArguments
}

func (*TemplateArgumentsContext) IsTemplateArgumentsContext() {}

func NewTemplateArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateArgumentsContext {
	var p = new(TemplateArgumentsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_templateArguments

	return p
}

func (s *TemplateArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateArgumentsContext) LT() antlr.TerminalNode {
	return s.GetToken(ZserioParserLT, 0)
}

func (s *TemplateArgumentsContext) AllTemplateArgument() []ITemplateArgumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITemplateArgumentContext); ok {
			len++
		}
	}

	tst := make([]ITemplateArgumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITemplateArgumentContext); ok {
			tst[i] = t.(ITemplateArgumentContext)
			i++
		}
	}

	return tst
}

func (s *TemplateArgumentsContext) TemplateArgument(i int) ITemplateArgumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateArgumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateArgumentContext)
}

func (s *TemplateArgumentsContext) GT() antlr.TerminalNode {
	return s.GetToken(ZserioParserGT, 0)
}

func (s *TemplateArgumentsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ZserioParserCOMMA)
}

func (s *TemplateArgumentsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ZserioParserCOMMA, i)
}

func (s *TemplateArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateArgumentsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitTemplateArguments(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) TemplateArguments() (localctx ITemplateArgumentsContext) {
	localctx = NewTemplateArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, ZserioParserRULE_templateArguments)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(597)
		p.Match(ZserioParserLT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(598)
		p.TemplateArgument()
	}
	p.SetState(603)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ZserioParserCOMMA {
		{
			p.SetState(599)
			p.Match(ZserioParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(600)
			p.TemplateArgument()
		}

		p.SetState(605)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(606)
		p.Match(ZserioParserGT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITemplateArgumentContext is an interface to support dynamic dispatch.
type ITemplateArgumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TypeReference() ITypeReferenceContext

	// IsTemplateArgumentContext differentiates from other interfaces.
	IsTemplateArgumentContext()
}

type TemplateArgumentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateArgumentContext() *TemplateArgumentContext {
	var p = new(TemplateArgumentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_templateArgument
	return p
}

func InitEmptyTemplateArgumentContext(p *TemplateArgumentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_templateArgument
}

func (*TemplateArgumentContext) IsTemplateArgumentContext() {}

func NewTemplateArgumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateArgumentContext {
	var p = new(TemplateArgumentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_templateArgument

	return p
}

func (s *TemplateArgumentContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateArgumentContext) TypeReference() ITypeReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeReferenceContext)
}

func (s *TemplateArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateArgumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateArgumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitTemplateArgument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) TemplateArgument() (localctx ITemplateArgumentContext) {
	localctx = NewTemplateArgumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, ZserioParserRULE_templateArgument)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(608)
		p.TypeReference()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInstantiateDeclarationContext is an interface to support dynamic dispatch.
type IInstantiateDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INSTANTIATE() antlr.TerminalNode
	TypeReference() ITypeReferenceContext
	Id() IIdContext
	SEMICOLON() antlr.TerminalNode

	// IsInstantiateDeclarationContext differentiates from other interfaces.
	IsInstantiateDeclarationContext()
}

type InstantiateDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInstantiateDeclarationContext() *InstantiateDeclarationContext {
	var p = new(InstantiateDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_instantiateDeclaration
	return p
}

func InitEmptyInstantiateDeclarationContext(p *InstantiateDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_instantiateDeclaration
}

func (*InstantiateDeclarationContext) IsInstantiateDeclarationContext() {}

func NewInstantiateDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstantiateDeclarationContext {
	var p = new(InstantiateDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_instantiateDeclaration

	return p
}

func (s *InstantiateDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *InstantiateDeclarationContext) INSTANTIATE() antlr.TerminalNode {
	return s.GetToken(ZserioParserINSTANTIATE, 0)
}

func (s *InstantiateDeclarationContext) TypeReference() ITypeReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeReferenceContext)
}

func (s *InstantiateDeclarationContext) Id() IIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *InstantiateDeclarationContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserSEMICOLON, 0)
}

func (s *InstantiateDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstantiateDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstantiateDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitInstantiateDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) InstantiateDeclaration() (localctx IInstantiateDeclarationContext) {
	localctx = NewInstantiateDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, ZserioParserRULE_instantiateDeclaration)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(610)
		p.Match(ZserioParserINSTANTIATE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(611)
		p.TypeReference()
	}
	{
		p.SetState(612)
		p.Id()
	}
	{
		p.SetState(613)
		p.Match(ZserioParserSEMICOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_expression
	return p
}

func InitEmptyExpressionContext(p *ExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_expression
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) CopyAll(ctx *ExpressionContext) {
	s.CopyFrom(&ctx.BaseParserRuleContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type BitwiseXorExpressionContext struct {
	ExpressionContext
	operator antlr.Token
}

func NewBitwiseXorExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BitwiseXorExpressionContext {
	var p = new(BitwiseXorExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *BitwiseXorExpressionContext) GetOperator() antlr.Token { return s.operator }

func (s *BitwiseXorExpressionContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *BitwiseXorExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseXorExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *BitwiseXorExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BitwiseXorExpressionContext) XOR() antlr.TerminalNode {
	return s.GetToken(ZserioParserXOR, 0)
}

func (s *BitwiseXorExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitBitwiseXorExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type DotExpressionContext struct {
	ExpressionContext
	operator antlr.Token
}

func NewDotExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DotExpressionContext {
	var p = new(DotExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *DotExpressionContext) GetOperator() antlr.Token { return s.operator }

func (s *DotExpressionContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *DotExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DotExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DotExpressionContext) Id() IIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *DotExpressionContext) DOT() antlr.TerminalNode {
	return s.GetToken(ZserioParserDOT, 0)
}

func (s *DotExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitDotExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type ValueofExpressionContext struct {
	ExpressionContext
	operator antlr.Token
}

func NewValueofExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ValueofExpressionContext {
	var p = new(ValueofExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *ValueofExpressionContext) GetOperator() antlr.Token { return s.operator }

func (s *ValueofExpressionContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *ValueofExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValueofExpressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserLPAREN, 0)
}

func (s *ValueofExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ValueofExpressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserRPAREN, 0)
}

func (s *ValueofExpressionContext) VALUEOF() antlr.TerminalNode {
	return s.GetToken(ZserioParserVALUEOF, 0)
}

func (s *ValueofExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitValueofExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShiftExpressionContext struct {
	ExpressionContext
	operator antlr.Token
}

func NewShiftExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShiftExpressionContext {
	var p = new(ShiftExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *ShiftExpressionContext) GetOperator() antlr.Token { return s.operator }

func (s *ShiftExpressionContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *ShiftExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShiftExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ShiftExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ShiftExpressionContext) AllGT() []antlr.TerminalNode {
	return s.GetTokens(ZserioParserGT)
}

func (s *ShiftExpressionContext) GT(i int) antlr.TerminalNode {
	return s.GetToken(ZserioParserGT, i)
}

func (s *ShiftExpressionContext) LSHIFT() antlr.TerminalNode {
	return s.GetToken(ZserioParserLSHIFT, 0)
}

func (s *ShiftExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitShiftExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type ArrayExpressionContext struct {
	ExpressionContext
	operator antlr.Token
}

func NewArrayExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ArrayExpressionContext {
	var p = new(ArrayExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *ArrayExpressionContext) GetOperator() antlr.Token { return s.operator }

func (s *ArrayExpressionContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *ArrayExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ArrayExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ArrayExpressionContext) RBRACKET() antlr.TerminalNode {
	return s.GetToken(ZserioParserRBRACKET, 0)
}

func (s *ArrayExpressionContext) LBRACKET() antlr.TerminalNode {
	return s.GetToken(ZserioParserLBRACKET, 0)
}

func (s *ArrayExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitArrayExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type NumbitsExpressionContext struct {
	ExpressionContext
	operator antlr.Token
}

func NewNumbitsExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NumbitsExpressionContext {
	var p = new(NumbitsExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *NumbitsExpressionContext) GetOperator() antlr.Token { return s.operator }

func (s *NumbitsExpressionContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *NumbitsExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumbitsExpressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserLPAREN, 0)
}

func (s *NumbitsExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NumbitsExpressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserRPAREN, 0)
}

func (s *NumbitsExpressionContext) NUMBITS() antlr.TerminalNode {
	return s.GetToken(ZserioParserNUMBITS, 0)
}

func (s *NumbitsExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitNumbitsExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type AdditiveExpressionContext struct {
	ExpressionContext
	operator antlr.Token
}

func NewAdditiveExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AdditiveExpressionContext {
	var p = new(AdditiveExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *AdditiveExpressionContext) GetOperator() antlr.Token { return s.operator }

func (s *AdditiveExpressionContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *AdditiveExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AdditiveExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *AdditiveExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AdditiveExpressionContext) PLUS() antlr.TerminalNode {
	return s.GetToken(ZserioParserPLUS, 0)
}

func (s *AdditiveExpressionContext) MINUS() antlr.TerminalNode {
	return s.GetToken(ZserioParserMINUS, 0)
}

func (s *AdditiveExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitAdditiveExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type RelationalExpressionContext struct {
	ExpressionContext
	operator antlr.Token
}

func NewRelationalExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RelationalExpressionContext {
	var p = new(RelationalExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *RelationalExpressionContext) GetOperator() antlr.Token { return s.operator }

func (s *RelationalExpressionContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *RelationalExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationalExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *RelationalExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *RelationalExpressionContext) LT() antlr.TerminalNode {
	return s.GetToken(ZserioParserLT, 0)
}

func (s *RelationalExpressionContext) LE() antlr.TerminalNode {
	return s.GetToken(ZserioParserLE, 0)
}

func (s *RelationalExpressionContext) GT() antlr.TerminalNode {
	return s.GetToken(ZserioParserGT, 0)
}

func (s *RelationalExpressionContext) GE() antlr.TerminalNode {
	return s.GetToken(ZserioParserGE, 0)
}

func (s *RelationalExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitRelationalExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type LengthofExpressionContext struct {
	ExpressionContext
	operator antlr.Token
}

func NewLengthofExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LengthofExpressionContext {
	var p = new(LengthofExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *LengthofExpressionContext) GetOperator() antlr.Token { return s.operator }

func (s *LengthofExpressionContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *LengthofExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LengthofExpressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserLPAREN, 0)
}

func (s *LengthofExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LengthofExpressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserRPAREN, 0)
}

func (s *LengthofExpressionContext) LENGTHOF() antlr.TerminalNode {
	return s.GetToken(ZserioParserLENGTHOF, 0)
}

func (s *LengthofExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitLengthofExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type IdentifierExpressionContext struct {
	ExpressionContext
}

func NewIdentifierExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IdentifierExpressionContext {
	var p = new(IdentifierExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *IdentifierExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierExpressionContext) Id() IIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *IdentifierExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitIdentifierExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type MultiplicativeExpressionContext struct {
	ExpressionContext
	operator antlr.Token
}

func NewMultiplicativeExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MultiplicativeExpressionContext {
	var p = new(MultiplicativeExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *MultiplicativeExpressionContext) GetOperator() antlr.Token { return s.operator }

func (s *MultiplicativeExpressionContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *MultiplicativeExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultiplicativeExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *MultiplicativeExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MultiplicativeExpressionContext) MULTIPLY() antlr.TerminalNode {
	return s.GetToken(ZserioParserMULTIPLY, 0)
}

func (s *MultiplicativeExpressionContext) DIVIDE() antlr.TerminalNode {
	return s.GetToken(ZserioParserDIVIDE, 0)
}

func (s *MultiplicativeExpressionContext) MODULO() antlr.TerminalNode {
	return s.GetToken(ZserioParserMODULO, 0)
}

func (s *MultiplicativeExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitMultiplicativeExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type LogicalOrExpressionContext struct {
	ExpressionContext
	operator antlr.Token
}

func NewLogicalOrExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LogicalOrExpressionContext {
	var p = new(LogicalOrExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *LogicalOrExpressionContext) GetOperator() antlr.Token { return s.operator }

func (s *LogicalOrExpressionContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *LogicalOrExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalOrExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *LogicalOrExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LogicalOrExpressionContext) LOGICAL_OR() antlr.TerminalNode {
	return s.GetToken(ZserioParserLOGICAL_OR, 0)
}

func (s *LogicalOrExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitLogicalOrExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type IsSetExpressionContext struct {
	ExpressionContext
	operator antlr.Token
}

func NewIsSetExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IsSetExpressionContext {
	var p = new(IsSetExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *IsSetExpressionContext) GetOperator() antlr.Token { return s.operator }

func (s *IsSetExpressionContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *IsSetExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IsSetExpressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserLPAREN, 0)
}

func (s *IsSetExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *IsSetExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IsSetExpressionContext) COMMA() antlr.TerminalNode {
	return s.GetToken(ZserioParserCOMMA, 0)
}

func (s *IsSetExpressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserRPAREN, 0)
}

func (s *IsSetExpressionContext) ISSET() antlr.TerminalNode {
	return s.GetToken(ZserioParserISSET, 0)
}

func (s *IsSetExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitIsSetExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type BitwiseOrExpressionContext struct {
	ExpressionContext
	operator antlr.Token
}

func NewBitwiseOrExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BitwiseOrExpressionContext {
	var p = new(BitwiseOrExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *BitwiseOrExpressionContext) GetOperator() antlr.Token { return s.operator }

func (s *BitwiseOrExpressionContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *BitwiseOrExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseOrExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *BitwiseOrExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BitwiseOrExpressionContext) OR() antlr.TerminalNode {
	return s.GetToken(ZserioParserOR, 0)
}

func (s *BitwiseOrExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitBitwiseOrExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type ParenthesizedExpressionContext struct {
	ExpressionContext
	operator antlr.Token
}

func NewParenthesizedExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ParenthesizedExpressionContext {
	var p = new(ParenthesizedExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *ParenthesizedExpressionContext) GetOperator() antlr.Token { return s.operator }

func (s *ParenthesizedExpressionContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *ParenthesizedExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParenthesizedExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ParenthesizedExpressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserRPAREN, 0)
}

func (s *ParenthesizedExpressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserLPAREN, 0)
}

func (s *ParenthesizedExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitParenthesizedExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type BitwiseAndExpressionContext struct {
	ExpressionContext
	operator antlr.Token
}

func NewBitwiseAndExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BitwiseAndExpressionContext {
	var p = new(BitwiseAndExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *BitwiseAndExpressionContext) GetOperator() antlr.Token { return s.operator }

func (s *BitwiseAndExpressionContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *BitwiseAndExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitwiseAndExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *BitwiseAndExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BitwiseAndExpressionContext) AND() antlr.TerminalNode {
	return s.GetToken(ZserioParserAND, 0)
}

func (s *BitwiseAndExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitBitwiseAndExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type EqualityExpressionContext struct {
	ExpressionContext
	operator antlr.Token
}

func NewEqualityExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *EqualityExpressionContext {
	var p = new(EqualityExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *EqualityExpressionContext) GetOperator() antlr.Token { return s.operator }

func (s *EqualityExpressionContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *EqualityExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EqualityExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *EqualityExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *EqualityExpressionContext) EQ() antlr.TerminalNode {
	return s.GetToken(ZserioParserEQ, 0)
}

func (s *EqualityExpressionContext) NE() antlr.TerminalNode {
	return s.GetToken(ZserioParserNE, 0)
}

func (s *EqualityExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitEqualityExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type LogicalAndExpressionContext struct {
	ExpressionContext
	operator antlr.Token
}

func NewLogicalAndExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LogicalAndExpressionContext {
	var p = new(LogicalAndExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *LogicalAndExpressionContext) GetOperator() antlr.Token { return s.operator }

func (s *LogicalAndExpressionContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *LogicalAndExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalAndExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *LogicalAndExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LogicalAndExpressionContext) LOGICAL_AND() antlr.TerminalNode {
	return s.GetToken(ZserioParserLOGICAL_AND, 0)
}

func (s *LogicalAndExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitLogicalAndExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type FunctionCallExpressionContext struct {
	ExpressionContext
	operator antlr.Token
}

func NewFunctionCallExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionCallExpressionContext {
	var p = new(FunctionCallExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *FunctionCallExpressionContext) GetOperator() antlr.Token { return s.operator }

func (s *FunctionCallExpressionContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *FunctionCallExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FunctionCallExpressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserLPAREN, 0)
}

func (s *FunctionCallExpressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserRPAREN, 0)
}

func (s *FunctionCallExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitFunctionCallExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type IndexExpressionContext struct {
	ExpressionContext
}

func NewIndexExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexExpressionContext {
	var p = new(IndexExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *IndexExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexExpressionContext) INDEX() antlr.TerminalNode {
	return s.GetToken(ZserioParserINDEX, 0)
}

func (s *IndexExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitIndexExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type UnaryExpressionContext struct {
	ExpressionContext
	operator antlr.Token
}

func NewUnaryExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnaryExpressionContext {
	var p = new(UnaryExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *UnaryExpressionContext) GetOperator() antlr.Token { return s.operator }

func (s *UnaryExpressionContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *UnaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *UnaryExpressionContext) PLUS() antlr.TerminalNode {
	return s.GetToken(ZserioParserPLUS, 0)
}

func (s *UnaryExpressionContext) MINUS() antlr.TerminalNode {
	return s.GetToken(ZserioParserMINUS, 0)
}

func (s *UnaryExpressionContext) BANG() antlr.TerminalNode {
	return s.GetToken(ZserioParserBANG, 0)
}

func (s *UnaryExpressionContext) TILDE() antlr.TerminalNode {
	return s.GetToken(ZserioParserTILDE, 0)
}

func (s *UnaryExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitUnaryExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type LiteralExpressionContext struct {
	ExpressionContext
}

func NewLiteralExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LiteralExpressionContext {
	var p = new(LiteralExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *LiteralExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralExpressionContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *LiteralExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitLiteralExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type TernaryExpressionContext struct {
	ExpressionContext
	operator antlr.Token
}

func NewTernaryExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TernaryExpressionContext {
	var p = new(TernaryExpressionContext)

	InitEmptyExpressionContext(&p.ExpressionContext)
	p.parser = parser
	p.CopyAll(ctx.(*ExpressionContext))

	return p
}

func (s *TernaryExpressionContext) GetOperator() antlr.Token { return s.operator }

func (s *TernaryExpressionContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *TernaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TernaryExpressionContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *TernaryExpressionContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TernaryExpressionContext) COLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserCOLON, 0)
}

func (s *TernaryExpressionContext) QUESTIONMARK() antlr.TerminalNode {
	return s.GetToken(ZserioParserQUESTIONMARK, 0)
}

func (s *TernaryExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitTernaryExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *ZserioParser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 106
	p.EnterRecursionRule(localctx, 106, ZserioParserRULE_expression, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(647)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ZserioParserLPAREN:
		localctx = NewParenthesizedExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(616)

			var _m = p.Match(ZserioParserLPAREN)

			localctx.(*ParenthesizedExpressionContext).operator = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(617)
			p.expression(0)
		}
		{
			p.SetState(618)
			p.Match(ZserioParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ZserioParserISSET:
		localctx = NewIsSetExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(620)

			var _m = p.Match(ZserioParserISSET)

			localctx.(*IsSetExpressionContext).operator = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(621)
			p.Match(ZserioParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(622)
			p.expression(0)
		}
		{
			p.SetState(623)
			p.Match(ZserioParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(624)
			p.expression(0)
		}
		{
			p.SetState(625)
			p.Match(ZserioParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ZserioParserLENGTHOF:
		localctx = NewLengthofExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(627)

			var _m = p.Match(ZserioParserLENGTHOF)

			localctx.(*LengthofExpressionContext).operator = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(628)
			p.Match(ZserioParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(629)
			p.expression(0)
		}
		{
			p.SetState(630)
			p.Match(ZserioParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ZserioParserVALUEOF:
		localctx = NewValueofExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(632)

			var _m = p.Match(ZserioParserVALUEOF)

			localctx.(*ValueofExpressionContext).operator = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(633)
			p.Match(ZserioParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(634)
			p.expression(0)
		}
		{
			p.SetState(635)
			p.Match(ZserioParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ZserioParserNUMBITS:
		localctx = NewNumbitsExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(637)

			var _m = p.Match(ZserioParserNUMBITS)

			localctx.(*NumbitsExpressionContext).operator = _m
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(638)
			p.Match(ZserioParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(639)
			p.expression(0)
		}
		{
			p.SetState(640)
			p.Match(ZserioParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ZserioParserBANG, ZserioParserMINUS, ZserioParserPLUS, ZserioParserTILDE:
		localctx = NewUnaryExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(642)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*UnaryExpressionContext).operator = _lt

			_la = p.GetTokenStream().LA(1)

			if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1091043336) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*UnaryExpressionContext).operator = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(643)
			p.expression(15)
		}

	case ZserioParserBOOL_LITERAL, ZserioParserSTRING_LITERAL, ZserioParserBINARY_LITERAL, ZserioParserOCTAL_LITERAL, ZserioParserHEXADECIMAL_LITERAL, ZserioParserDOUBLE_LITERAL, ZserioParserFLOAT_LITERAL, ZserioParserDECIMAL_LITERAL:
		localctx = NewLiteralExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(644)
			p.Literal()
		}

	case ZserioParserINDEX:
		localctx = NewIndexExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(645)
			p.Match(ZserioParserINDEX)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case ZserioParserID:
		localctx = NewIdentifierExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(646)
			p.Id()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(702)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 60, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(700)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 59, p.GetParserRuleContext()) {
			case 1:
				localctx = NewMultiplicativeExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZserioParserRULE_expression)
				p.SetState(649)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
					goto errorExit
				}
				{
					p.SetState(650)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*MultiplicativeExpressionContext).operator = _lt

					_la = p.GetTokenStream().LA(1)

					if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&3145792) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*MultiplicativeExpressionContext).operator = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(651)
					p.expression(15)
				}

			case 2:
				localctx = NewAdditiveExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZserioParserRULE_expression)
				p.SetState(652)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
					goto errorExit
				}
				{
					p.SetState(653)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*AdditiveExpressionContext).operator = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == ZserioParserMINUS || _la == ZserioParserPLUS) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*AdditiveExpressionContext).operator = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(654)
					p.expression(14)
				}

			case 3:
				localctx = NewShiftExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZserioParserRULE_expression)
				p.SetState(655)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
					goto errorExit
				}
				p.SetState(659)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}

				switch p.GetTokenStream().LA(1) {
				case ZserioParserLSHIFT:
					{
						p.SetState(656)

						var _m = p.Match(ZserioParserLSHIFT)

						localctx.(*ShiftExpressionContext).operator = _m
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case ZserioParserGT:
					{
						p.SetState(657)

						var _m = p.Match(ZserioParserGT)

						localctx.(*ShiftExpressionContext).operator = _m
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(658)
						p.Match(ZserioParserGT)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				default:
					p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					goto errorExit
				}
				{
					p.SetState(661)
					p.expression(13)
				}

			case 4:
				localctx = NewRelationalExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZserioParserRULE_expression)
				p.SetState(662)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
					goto errorExit
				}
				{
					p.SetState(663)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*RelationalExpressionContext).operator = _lt

					_la = p.GetTokenStream().LA(1)

					if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&271872) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*RelationalExpressionContext).operator = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(664)
					p.expression(12)
				}

			case 5:
				localctx = NewEqualityExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZserioParserRULE_expression)
				p.SetState(665)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
					goto errorExit
				}
				{
					p.SetState(666)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*EqualityExpressionContext).operator = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == ZserioParserEQ || _la == ZserioParserNE) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*EqualityExpressionContext).operator = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(667)
					p.expression(11)
				}

			case 6:
				localctx = NewBitwiseAndExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZserioParserRULE_expression)
				p.SetState(668)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
					goto errorExit
				}
				{
					p.SetState(669)

					var _m = p.Match(ZserioParserAND)

					localctx.(*BitwiseAndExpressionContext).operator = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(670)
					p.expression(10)
				}

			case 7:
				localctx = NewBitwiseXorExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZserioParserRULE_expression)
				p.SetState(671)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
					goto errorExit
				}
				{
					p.SetState(672)

					var _m = p.Match(ZserioParserXOR)

					localctx.(*BitwiseXorExpressionContext).operator = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(673)
					p.expression(9)
				}

			case 8:
				localctx = NewBitwiseOrExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZserioParserRULE_expression)
				p.SetState(674)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
					goto errorExit
				}
				{
					p.SetState(675)

					var _m = p.Match(ZserioParserOR)

					localctx.(*BitwiseOrExpressionContext).operator = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(676)
					p.expression(8)
				}

			case 9:
				localctx = NewLogicalAndExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZserioParserRULE_expression)
				p.SetState(677)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
					goto errorExit
				}
				{
					p.SetState(678)

					var _m = p.Match(ZserioParserLOGICAL_AND)

					localctx.(*LogicalAndExpressionContext).operator = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(679)
					p.expression(7)
				}

			case 10:
				localctx = NewLogicalOrExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZserioParserRULE_expression)
				p.SetState(680)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
					goto errorExit
				}
				{
					p.SetState(681)

					var _m = p.Match(ZserioParserLOGICAL_OR)

					localctx.(*LogicalOrExpressionContext).operator = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(682)
					p.expression(6)
				}

			case 11:
				localctx = NewTernaryExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZserioParserRULE_expression)
				p.SetState(683)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
					goto errorExit
				}
				{
					p.SetState(684)

					var _m = p.Match(ZserioParserQUESTIONMARK)

					localctx.(*TernaryExpressionContext).operator = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(685)
					p.expression(0)
				}
				{
					p.SetState(686)
					p.Match(ZserioParserCOLON)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(687)
					p.expression(4)
				}

			case 12:
				localctx = NewFunctionCallExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZserioParserRULE_expression)
				p.SetState(689)

				if !(p.Precpred(p.GetParserRuleContext(), 22)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 22)", ""))
					goto errorExit
				}
				{
					p.SetState(690)
					p.Match(ZserioParserLPAREN)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(691)

					var _m = p.Match(ZserioParserRPAREN)

					localctx.(*FunctionCallExpressionContext).operator = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 13:
				localctx = NewArrayExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZserioParserRULE_expression)
				p.SetState(692)

				if !(p.Precpred(p.GetParserRuleContext(), 21)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 21)", ""))
					goto errorExit
				}
				{
					p.SetState(693)

					var _m = p.Match(ZserioParserLBRACKET)

					localctx.(*ArrayExpressionContext).operator = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(694)
					p.expression(0)
				}
				{
					p.SetState(695)
					p.Match(ZserioParserRBRACKET)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 14:
				localctx = NewDotExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZserioParserRULE_expression)
				p.SetState(697)

				if !(p.Precpred(p.GetParserRuleContext(), 20)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 20)", ""))
					goto errorExit
				}
				{
					p.SetState(698)

					var _m = p.Match(ZserioParserDOT)

					localctx.(*DotExpressionContext).operator = _m
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(699)
					p.Id()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(704)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 60, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BINARY_LITERAL() antlr.TerminalNode
	OCTAL_LITERAL() antlr.TerminalNode
	DECIMAL_LITERAL() antlr.TerminalNode
	HEXADECIMAL_LITERAL() antlr.TerminalNode
	BOOL_LITERAL() antlr.TerminalNode
	STRING_LITERAL() antlr.TerminalNode
	FLOAT_LITERAL() antlr.TerminalNode
	DOUBLE_LITERAL() antlr.TerminalNode

	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_literal
	return p
}

func InitEmptyLiteralContext(p *LiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_literal
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) BINARY_LITERAL() antlr.TerminalNode {
	return s.GetToken(ZserioParserBINARY_LITERAL, 0)
}

func (s *LiteralContext) OCTAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(ZserioParserOCTAL_LITERAL, 0)
}

func (s *LiteralContext) DECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(ZserioParserDECIMAL_LITERAL, 0)
}

func (s *LiteralContext) HEXADECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(ZserioParserHEXADECIMAL_LITERAL, 0)
}

func (s *LiteralContext) BOOL_LITERAL() antlr.TerminalNode {
	return s.GetToken(ZserioParserBOOL_LITERAL, 0)
}

func (s *LiteralContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(ZserioParserSTRING_LITERAL, 0)
}

func (s *LiteralContext) FLOAT_LITERAL() antlr.TerminalNode {
	return s.GetToken(ZserioParserFLOAT_LITERAL, 0)
}

func (s *LiteralContext) DOUBLE_LITERAL() antlr.TerminalNode {
	return s.GetToken(ZserioParserDOUBLE_LITERAL, 0)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) Literal() (localctx ILiteralContext) {
	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, ZserioParserRULE_literal)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(705)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-103)) & ^0x3f) == 0 && ((int64(1)<<(_la-103))&255) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdContext is an interface to support dynamic dispatch.
type IIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ID() antlr.TerminalNode

	// IsIdContext differentiates from other interfaces.
	IsIdContext()
}

type IdContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdContext() *IdContext {
	var p = new(IdContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_id
	return p
}

func InitEmptyIdContext(p *IdContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_id
}

func (*IdContext) IsIdContext() {}

func NewIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdContext {
	var p = new(IdContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_id

	return p
}

func (s *IdContext) GetParser() antlr.Parser { return s.parser }

func (s *IdContext) ID() antlr.TerminalNode {
	return s.GetToken(ZserioParserID, 0)
}

func (s *IdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) Id() (localctx IIdContext) {
	localctx = NewIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, ZserioParserRULE_id)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(707)
		p.Match(ZserioParserID)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeReferenceContext is an interface to support dynamic dispatch.
type ITypeReferenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BuiltinType() IBuiltinTypeContext
	QualifiedName() IQualifiedNameContext
	TemplateArguments() ITemplateArgumentsContext

	// IsTypeReferenceContext differentiates from other interfaces.
	IsTypeReferenceContext()
}

type TypeReferenceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeReferenceContext() *TypeReferenceContext {
	var p = new(TypeReferenceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_typeReference
	return p
}

func InitEmptyTypeReferenceContext(p *TypeReferenceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_typeReference
}

func (*TypeReferenceContext) IsTypeReferenceContext() {}

func NewTypeReferenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeReferenceContext {
	var p = new(TypeReferenceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_typeReference

	return p
}

func (s *TypeReferenceContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeReferenceContext) BuiltinType() IBuiltinTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuiltinTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuiltinTypeContext)
}

func (s *TypeReferenceContext) QualifiedName() IQualifiedNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *TypeReferenceContext) TemplateArguments() ITemplateArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateArgumentsContext)
}

func (s *TypeReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeReferenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeReferenceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitTypeReference(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) TypeReference() (localctx ITypeReferenceContext) {
	localctx = NewTypeReferenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, ZserioParserRULE_typeReference)
	p.SetState(714)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ZserioParserBIT_FIELD, ZserioParserBOOL, ZserioParserBYTES, ZserioParserEXTERN, ZserioParserFLOAT16, ZserioParserFLOAT32, ZserioParserFLOAT64, ZserioParserINT_FIELD, ZserioParserINT16, ZserioParserINT32, ZserioParserINT64, ZserioParserINT8, ZserioParserSTRING, ZserioParserUINT16, ZserioParserUINT32, ZserioParserUINT64, ZserioParserUINT8, ZserioParserVARINT, ZserioParserVARINT16, ZserioParserVARINT32, ZserioParserVARINT64, ZserioParserVARSIZE, ZserioParserVARUINT, ZserioParserVARUINT16, ZserioParserVARUINT32, ZserioParserVARUINT64:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(709)
			p.BuiltinType()
		}

	case ZserioParserID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(710)
			p.QualifiedName()
		}
		p.SetState(712)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 61, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(711)
				p.TemplateArguments()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeInstantiationContext is an interface to support dynamic dispatch.
type ITypeInstantiationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TypeReference() ITypeReferenceContext
	TypeArguments() ITypeArgumentsContext
	DynamicLengthArgument() IDynamicLengthArgumentContext

	// IsTypeInstantiationContext differentiates from other interfaces.
	IsTypeInstantiationContext()
}

type TypeInstantiationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeInstantiationContext() *TypeInstantiationContext {
	var p = new(TypeInstantiationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_typeInstantiation
	return p
}

func InitEmptyTypeInstantiationContext(p *TypeInstantiationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_typeInstantiation
}

func (*TypeInstantiationContext) IsTypeInstantiationContext() {}

func NewTypeInstantiationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeInstantiationContext {
	var p = new(TypeInstantiationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_typeInstantiation

	return p
}

func (s *TypeInstantiationContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeInstantiationContext) TypeReference() ITypeReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeReferenceContext)
}

func (s *TypeInstantiationContext) TypeArguments() ITypeArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentsContext)
}

func (s *TypeInstantiationContext) DynamicLengthArgument() IDynamicLengthArgumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDynamicLengthArgumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDynamicLengthArgumentContext)
}

func (s *TypeInstantiationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeInstantiationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeInstantiationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitTypeInstantiation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) TypeInstantiation() (localctx ITypeInstantiationContext) {
	localctx = NewTypeInstantiationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, ZserioParserRULE_typeInstantiation)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(716)
		p.TypeReference()
	}
	p.SetState(719)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	switch p.GetTokenStream().LA(1) {
	case ZserioParserLPAREN:
		{
			p.SetState(717)
			p.TypeArguments()
		}

	case ZserioParserLT:
		{
			p.SetState(718)
			p.DynamicLengthArgument()
		}

	case ZserioParserID:

	default:
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuiltinTypeContext is an interface to support dynamic dispatch.
type IBuiltinTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IntType() IIntTypeContext
	VarintType() IVarintTypeContext
	FixedBitFieldType() IFixedBitFieldTypeContext
	DynamicBitFieldType() IDynamicBitFieldTypeContext
	BoolType() IBoolTypeContext
	StringType() IStringTypeContext
	FloatType() IFloatTypeContext
	ExternType() IExternTypeContext
	BytesType() IBytesTypeContext

	// IsBuiltinTypeContext differentiates from other interfaces.
	IsBuiltinTypeContext()
}

type BuiltinTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuiltinTypeContext() *BuiltinTypeContext {
	var p = new(BuiltinTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_builtinType
	return p
}

func InitEmptyBuiltinTypeContext(p *BuiltinTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_builtinType
}

func (*BuiltinTypeContext) IsBuiltinTypeContext() {}

func NewBuiltinTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BuiltinTypeContext {
	var p = new(BuiltinTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_builtinType

	return p
}

func (s *BuiltinTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *BuiltinTypeContext) IntType() IIntTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntTypeContext)
}

func (s *BuiltinTypeContext) VarintType() IVarintTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVarintTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVarintTypeContext)
}

func (s *BuiltinTypeContext) FixedBitFieldType() IFixedBitFieldTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFixedBitFieldTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFixedBitFieldTypeContext)
}

func (s *BuiltinTypeContext) DynamicBitFieldType() IDynamicBitFieldTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDynamicBitFieldTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDynamicBitFieldTypeContext)
}

func (s *BuiltinTypeContext) BoolType() IBoolTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBoolTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBoolTypeContext)
}

func (s *BuiltinTypeContext) StringType() IStringTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringTypeContext)
}

func (s *BuiltinTypeContext) FloatType() IFloatTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFloatTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFloatTypeContext)
}

func (s *BuiltinTypeContext) ExternType() IExternTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExternTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExternTypeContext)
}

func (s *BuiltinTypeContext) BytesType() IBytesTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBytesTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBytesTypeContext)
}

func (s *BuiltinTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BuiltinTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BuiltinTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitBuiltinType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) BuiltinType() (localctx IBuiltinTypeContext) {
	localctx = NewBuiltinTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, ZserioParserRULE_builtinType)
	p.SetState(730)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 64, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(721)
			p.IntType()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(722)
			p.VarintType()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(723)
			p.FixedBitFieldType()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(724)
			p.DynamicBitFieldType()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(725)
			p.BoolType()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(726)
			p.StringType()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(727)
			p.FloatType()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(728)
			p.ExternType()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(729)
			p.BytesType()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQualifiedNameContext is an interface to support dynamic dispatch.
type IQualifiedNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllId() []IIdContext
	Id(i int) IIdContext
	AllDOT() []antlr.TerminalNode
	DOT(i int) antlr.TerminalNode

	// IsQualifiedNameContext differentiates from other interfaces.
	IsQualifiedNameContext()
}

type QualifiedNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualifiedNameContext() *QualifiedNameContext {
	var p = new(QualifiedNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_qualifiedName
	return p
}

func InitEmptyQualifiedNameContext(p *QualifiedNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_qualifiedName
}

func (*QualifiedNameContext) IsQualifiedNameContext() {}

func NewQualifiedNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QualifiedNameContext {
	var p = new(QualifiedNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_qualifiedName

	return p
}

func (s *QualifiedNameContext) GetParser() antlr.Parser { return s.parser }

func (s *QualifiedNameContext) AllId() []IIdContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdContext); ok {
			len++
		}
	}

	tst := make([]IIdContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdContext); ok {
			tst[i] = t.(IIdContext)
			i++
		}
	}

	return tst
}

func (s *QualifiedNameContext) Id(i int) IIdContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *QualifiedNameContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(ZserioParserDOT)
}

func (s *QualifiedNameContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(ZserioParserDOT, i)
}

func (s *QualifiedNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QualifiedNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QualifiedNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitQualifiedName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) QualifiedName() (localctx IQualifiedNameContext) {
	localctx = NewQualifiedNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, ZserioParserRULE_qualifiedName)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(732)
		p.Id()
	}
	p.SetState(737)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ZserioParserDOT {
		{
			p.SetState(733)
			p.Match(ZserioParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(734)
			p.Id()
		}

		p.SetState(739)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeArgumentsContext is an interface to support dynamic dispatch.
type ITypeArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LPAREN() antlr.TerminalNode
	AllTypeArgument() []ITypeArgumentContext
	TypeArgument(i int) ITypeArgumentContext
	RPAREN() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsTypeArgumentsContext differentiates from other interfaces.
	IsTypeArgumentsContext()
}

type TypeArgumentsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeArgumentsContext() *TypeArgumentsContext {
	var p = new(TypeArgumentsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_typeArguments
	return p
}

func InitEmptyTypeArgumentsContext(p *TypeArgumentsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_typeArguments
}

func (*TypeArgumentsContext) IsTypeArgumentsContext() {}

func NewTypeArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeArgumentsContext {
	var p = new(TypeArgumentsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_typeArguments

	return p
}

func (s *TypeArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeArgumentsContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserLPAREN, 0)
}

func (s *TypeArgumentsContext) AllTypeArgument() []ITypeArgumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeArgumentContext); ok {
			len++
		}
	}

	tst := make([]ITypeArgumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeArgumentContext); ok {
			tst[i] = t.(ITypeArgumentContext)
			i++
		}
	}

	return tst
}

func (s *TypeArgumentsContext) TypeArgument(i int) ITypeArgumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeArgumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeArgumentContext)
}

func (s *TypeArgumentsContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(ZserioParserRPAREN, 0)
}

func (s *TypeArgumentsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ZserioParserCOMMA)
}

func (s *TypeArgumentsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ZserioParserCOMMA, i)
}

func (s *TypeArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeArgumentsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitTypeArguments(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) TypeArguments() (localctx ITypeArgumentsContext) {
	localctx = NewTypeArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, ZserioParserRULE_typeArguments)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(740)
		p.Match(ZserioParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(741)
		p.TypeArgument()
	}
	p.SetState(746)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == ZserioParserCOMMA {
		{
			p.SetState(742)
			p.Match(ZserioParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(743)
			p.TypeArgument()
		}

		p.SetState(748)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(749)
		p.Match(ZserioParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeArgumentContext is an interface to support dynamic dispatch.
type ITypeArgumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EXPLICIT() antlr.TerminalNode
	Id() IIdContext
	Expression() IExpressionContext

	// IsTypeArgumentContext differentiates from other interfaces.
	IsTypeArgumentContext()
}

type TypeArgumentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeArgumentContext() *TypeArgumentContext {
	var p = new(TypeArgumentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_typeArgument
	return p
}

func InitEmptyTypeArgumentContext(p *TypeArgumentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_typeArgument
}

func (*TypeArgumentContext) IsTypeArgumentContext() {}

func NewTypeArgumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeArgumentContext {
	var p = new(TypeArgumentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_typeArgument

	return p
}

func (s *TypeArgumentContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeArgumentContext) EXPLICIT() antlr.TerminalNode {
	return s.GetToken(ZserioParserEXPLICIT, 0)
}

func (s *TypeArgumentContext) Id() IIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *TypeArgumentContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TypeArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeArgumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeArgumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitTypeArgument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) TypeArgument() (localctx ITypeArgumentContext) {
	localctx = NewTypeArgumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, ZserioParserRULE_typeArgument)
	p.SetState(754)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case ZserioParserEXPLICIT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(751)
			p.Match(ZserioParserEXPLICIT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(752)
			p.Id()
		}

	case ZserioParserBANG, ZserioParserLPAREN, ZserioParserMINUS, ZserioParserPLUS, ZserioParserTILDE, ZserioParserINDEX, ZserioParserISSET, ZserioParserLENGTHOF, ZserioParserNUMBITS, ZserioParserVALUEOF, ZserioParserBOOL_LITERAL, ZserioParserSTRING_LITERAL, ZserioParserBINARY_LITERAL, ZserioParserOCTAL_LITERAL, ZserioParserHEXADECIMAL_LITERAL, ZserioParserDOUBLE_LITERAL, ZserioParserFLOAT_LITERAL, ZserioParserDECIMAL_LITERAL, ZserioParserID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(753)
			p.expression(0)
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDynamicLengthArgumentContext is an interface to support dynamic dispatch.
type IDynamicLengthArgumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LT() antlr.TerminalNode
	Expression() IExpressionContext
	GT() antlr.TerminalNode

	// IsDynamicLengthArgumentContext differentiates from other interfaces.
	IsDynamicLengthArgumentContext()
}

type DynamicLengthArgumentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDynamicLengthArgumentContext() *DynamicLengthArgumentContext {
	var p = new(DynamicLengthArgumentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_dynamicLengthArgument
	return p
}

func InitEmptyDynamicLengthArgumentContext(p *DynamicLengthArgumentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_dynamicLengthArgument
}

func (*DynamicLengthArgumentContext) IsDynamicLengthArgumentContext() {}

func NewDynamicLengthArgumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DynamicLengthArgumentContext {
	var p = new(DynamicLengthArgumentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_dynamicLengthArgument

	return p
}

func (s *DynamicLengthArgumentContext) GetParser() antlr.Parser { return s.parser }

func (s *DynamicLengthArgumentContext) LT() antlr.TerminalNode {
	return s.GetToken(ZserioParserLT, 0)
}

func (s *DynamicLengthArgumentContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DynamicLengthArgumentContext) GT() antlr.TerminalNode {
	return s.GetToken(ZserioParserGT, 0)
}

func (s *DynamicLengthArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DynamicLengthArgumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DynamicLengthArgumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitDynamicLengthArgument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) DynamicLengthArgument() (localctx IDynamicLengthArgumentContext) {
	localctx = NewDynamicLengthArgumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, ZserioParserRULE_dynamicLengthArgument)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(756)
		p.Match(ZserioParserLT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(757)
		p.expression(0)
	}
	{
		p.SetState(758)
		p.Match(ZserioParserGT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIntTypeContext is an interface to support dynamic dispatch.
type IIntTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INT8() antlr.TerminalNode
	INT16() antlr.TerminalNode
	INT32() antlr.TerminalNode
	INT64() antlr.TerminalNode
	UINT8() antlr.TerminalNode
	UINT16() antlr.TerminalNode
	UINT32() antlr.TerminalNode
	UINT64() antlr.TerminalNode

	// IsIntTypeContext differentiates from other interfaces.
	IsIntTypeContext()
}

type IntTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntTypeContext() *IntTypeContext {
	var p = new(IntTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_intType
	return p
}

func InitEmptyIntTypeContext(p *IntTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_intType
}

func (*IntTypeContext) IsIntTypeContext() {}

func NewIntTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntTypeContext {
	var p = new(IntTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_intType

	return p
}

func (s *IntTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *IntTypeContext) INT8() antlr.TerminalNode {
	return s.GetToken(ZserioParserINT8, 0)
}

func (s *IntTypeContext) INT16() antlr.TerminalNode {
	return s.GetToken(ZserioParserINT16, 0)
}

func (s *IntTypeContext) INT32() antlr.TerminalNode {
	return s.GetToken(ZserioParserINT32, 0)
}

func (s *IntTypeContext) INT64() antlr.TerminalNode {
	return s.GetToken(ZserioParserINT64, 0)
}

func (s *IntTypeContext) UINT8() antlr.TerminalNode {
	return s.GetToken(ZserioParserUINT8, 0)
}

func (s *IntTypeContext) UINT16() antlr.TerminalNode {
	return s.GetToken(ZserioParserUINT16, 0)
}

func (s *IntTypeContext) UINT32() antlr.TerminalNode {
	return s.GetToken(ZserioParserUINT32, 0)
}

func (s *IntTypeContext) UINT64() antlr.TerminalNode {
	return s.GetToken(ZserioParserUINT64, 0)
}

func (s *IntTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitIntType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) IntType() (localctx IIntTypeContext) {
	localctx = NewIntTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, ZserioParserRULE_intType)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(760)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-54)) & ^0x3f) == 0 && ((int64(1)<<(_la-54))&2013265935) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVarintTypeContext is an interface to support dynamic dispatch.
type IVarintTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VARINT() antlr.TerminalNode
	VARINT16() antlr.TerminalNode
	VARINT32() antlr.TerminalNode
	VARINT64() antlr.TerminalNode
	VARSIZE() antlr.TerminalNode
	VARUINT() antlr.TerminalNode
	VARUINT16() antlr.TerminalNode
	VARUINT32() antlr.TerminalNode
	VARUINT64() antlr.TerminalNode

	// IsVarintTypeContext differentiates from other interfaces.
	IsVarintTypeContext()
}

type VarintTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVarintTypeContext() *VarintTypeContext {
	var p = new(VarintTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_varintType
	return p
}

func InitEmptyVarintTypeContext(p *VarintTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_varintType
}

func (*VarintTypeContext) IsVarintTypeContext() {}

func NewVarintTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VarintTypeContext {
	var p = new(VarintTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_varintType

	return p
}

func (s *VarintTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *VarintTypeContext) VARINT() antlr.TerminalNode {
	return s.GetToken(ZserioParserVARINT, 0)
}

func (s *VarintTypeContext) VARINT16() antlr.TerminalNode {
	return s.GetToken(ZserioParserVARINT16, 0)
}

func (s *VarintTypeContext) VARINT32() antlr.TerminalNode {
	return s.GetToken(ZserioParserVARINT32, 0)
}

func (s *VarintTypeContext) VARINT64() antlr.TerminalNode {
	return s.GetToken(ZserioParserVARINT64, 0)
}

func (s *VarintTypeContext) VARSIZE() antlr.TerminalNode {
	return s.GetToken(ZserioParserVARSIZE, 0)
}

func (s *VarintTypeContext) VARUINT() antlr.TerminalNode {
	return s.GetToken(ZserioParserVARUINT, 0)
}

func (s *VarintTypeContext) VARUINT16() antlr.TerminalNode {
	return s.GetToken(ZserioParserVARUINT16, 0)
}

func (s *VarintTypeContext) VARUINT32() antlr.TerminalNode {
	return s.GetToken(ZserioParserVARUINT32, 0)
}

func (s *VarintTypeContext) VARUINT64() antlr.TerminalNode {
	return s.GetToken(ZserioParserVARUINT64, 0)
}

func (s *VarintTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarintTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VarintTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitVarintType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) VarintType() (localctx IVarintTypeContext) {
	localctx = NewVarintTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, ZserioParserRULE_varintType)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(762)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-88)) & ^0x3f) == 0 && ((int64(1)<<(_la-88))&511) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFixedBitFieldTypeContext is an interface to support dynamic dispatch.
type IFixedBitFieldTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COLON() antlr.TerminalNode
	DECIMAL_LITERAL() antlr.TerminalNode
	BIT_FIELD() antlr.TerminalNode
	INT_FIELD() antlr.TerminalNode

	// IsFixedBitFieldTypeContext differentiates from other interfaces.
	IsFixedBitFieldTypeContext()
}

type FixedBitFieldTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFixedBitFieldTypeContext() *FixedBitFieldTypeContext {
	var p = new(FixedBitFieldTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_fixedBitFieldType
	return p
}

func InitEmptyFixedBitFieldTypeContext(p *FixedBitFieldTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_fixedBitFieldType
}

func (*FixedBitFieldTypeContext) IsFixedBitFieldTypeContext() {}

func NewFixedBitFieldTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FixedBitFieldTypeContext {
	var p = new(FixedBitFieldTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_fixedBitFieldType

	return p
}

func (s *FixedBitFieldTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *FixedBitFieldTypeContext) COLON() antlr.TerminalNode {
	return s.GetToken(ZserioParserCOLON, 0)
}

func (s *FixedBitFieldTypeContext) DECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(ZserioParserDECIMAL_LITERAL, 0)
}

func (s *FixedBitFieldTypeContext) BIT_FIELD() antlr.TerminalNode {
	return s.GetToken(ZserioParserBIT_FIELD, 0)
}

func (s *FixedBitFieldTypeContext) INT_FIELD() antlr.TerminalNode {
	return s.GetToken(ZserioParserINT_FIELD, 0)
}

func (s *FixedBitFieldTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FixedBitFieldTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FixedBitFieldTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitFixedBitFieldType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) FixedBitFieldType() (localctx IFixedBitFieldTypeContext) {
	localctx = NewFixedBitFieldTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, ZserioParserRULE_fixedBitFieldType)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(764)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ZserioParserBIT_FIELD || _la == ZserioParserINT_FIELD) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(765)
		p.Match(ZserioParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(766)
		p.Match(ZserioParserDECIMAL_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDynamicBitFieldTypeContext is an interface to support dynamic dispatch.
type IDynamicBitFieldTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BIT_FIELD() antlr.TerminalNode
	INT_FIELD() antlr.TerminalNode

	// IsDynamicBitFieldTypeContext differentiates from other interfaces.
	IsDynamicBitFieldTypeContext()
}

type DynamicBitFieldTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDynamicBitFieldTypeContext() *DynamicBitFieldTypeContext {
	var p = new(DynamicBitFieldTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_dynamicBitFieldType
	return p
}

func InitEmptyDynamicBitFieldTypeContext(p *DynamicBitFieldTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_dynamicBitFieldType
}

func (*DynamicBitFieldTypeContext) IsDynamicBitFieldTypeContext() {}

func NewDynamicBitFieldTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DynamicBitFieldTypeContext {
	var p = new(DynamicBitFieldTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_dynamicBitFieldType

	return p
}

func (s *DynamicBitFieldTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *DynamicBitFieldTypeContext) BIT_FIELD() antlr.TerminalNode {
	return s.GetToken(ZserioParserBIT_FIELD, 0)
}

func (s *DynamicBitFieldTypeContext) INT_FIELD() antlr.TerminalNode {
	return s.GetToken(ZserioParserINT_FIELD, 0)
}

func (s *DynamicBitFieldTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DynamicBitFieldTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DynamicBitFieldTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitDynamicBitFieldType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) DynamicBitFieldType() (localctx IDynamicBitFieldTypeContext) {
	localctx = NewDynamicBitFieldTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, ZserioParserRULE_dynamicBitFieldType)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(768)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ZserioParserBIT_FIELD || _la == ZserioParserINT_FIELD) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBoolTypeContext is an interface to support dynamic dispatch.
type IBoolTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BOOL() antlr.TerminalNode

	// IsBoolTypeContext differentiates from other interfaces.
	IsBoolTypeContext()
}

type BoolTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBoolTypeContext() *BoolTypeContext {
	var p = new(BoolTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_boolType
	return p
}

func InitEmptyBoolTypeContext(p *BoolTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_boolType
}

func (*BoolTypeContext) IsBoolTypeContext() {}

func NewBoolTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BoolTypeContext {
	var p = new(BoolTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_boolType

	return p
}

func (s *BoolTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *BoolTypeContext) BOOL() antlr.TerminalNode {
	return s.GetToken(ZserioParserBOOL, 0)
}

func (s *BoolTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BoolTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BoolTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitBoolType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) BoolType() (localctx IBoolTypeContext) {
	localctx = NewBoolTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, ZserioParserRULE_boolType)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(770)
		p.Match(ZserioParserBOOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStringTypeContext is an interface to support dynamic dispatch.
type IStringTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STRING() antlr.TerminalNode

	// IsStringTypeContext differentiates from other interfaces.
	IsStringTypeContext()
}

type StringTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringTypeContext() *StringTypeContext {
	var p = new(StringTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_stringType
	return p
}

func InitEmptyStringTypeContext(p *StringTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_stringType
}

func (*StringTypeContext) IsStringTypeContext() {}

func NewStringTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringTypeContext {
	var p = new(StringTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_stringType

	return p
}

func (s *StringTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *StringTypeContext) STRING() antlr.TerminalNode {
	return s.GetToken(ZserioParserSTRING, 0)
}

func (s *StringTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitStringType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) StringType() (localctx IStringTypeContext) {
	localctx = NewStringTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, ZserioParserRULE_stringType)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(772)
		p.Match(ZserioParserSTRING)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFloatTypeContext is an interface to support dynamic dispatch.
type IFloatTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FLOAT16() antlr.TerminalNode
	FLOAT32() antlr.TerminalNode
	FLOAT64() antlr.TerminalNode

	// IsFloatTypeContext differentiates from other interfaces.
	IsFloatTypeContext()
}

type FloatTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFloatTypeContext() *FloatTypeContext {
	var p = new(FloatTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_floatType
	return p
}

func InitEmptyFloatTypeContext(p *FloatTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_floatType
}

func (*FloatTypeContext) IsFloatTypeContext() {}

func NewFloatTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FloatTypeContext {
	var p = new(FloatTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_floatType

	return p
}

func (s *FloatTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *FloatTypeContext) FLOAT16() antlr.TerminalNode {
	return s.GetToken(ZserioParserFLOAT16, 0)
}

func (s *FloatTypeContext) FLOAT32() antlr.TerminalNode {
	return s.GetToken(ZserioParserFLOAT32, 0)
}

func (s *FloatTypeContext) FLOAT64() antlr.TerminalNode {
	return s.GetToken(ZserioParserFLOAT64, 0)
}

func (s *FloatTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FloatTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FloatTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitFloatType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) FloatType() (localctx IFloatTypeContext) {
	localctx = NewFloatTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, ZserioParserRULE_floatType)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(774)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&123145302310912) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExternTypeContext is an interface to support dynamic dispatch.
type IExternTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EXTERN() antlr.TerminalNode

	// IsExternTypeContext differentiates from other interfaces.
	IsExternTypeContext()
}

type ExternTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExternTypeContext() *ExternTypeContext {
	var p = new(ExternTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_externType
	return p
}

func InitEmptyExternTypeContext(p *ExternTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_externType
}

func (*ExternTypeContext) IsExternTypeContext() {}

func NewExternTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExternTypeContext {
	var p = new(ExternTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_externType

	return p
}

func (s *ExternTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ExternTypeContext) EXTERN() antlr.TerminalNode {
	return s.GetToken(ZserioParserEXTERN, 0)
}

func (s *ExternTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExternTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExternTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitExternType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) ExternType() (localctx IExternTypeContext) {
	localctx = NewExternTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, ZserioParserRULE_externType)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(776)
		p.Match(ZserioParserEXTERN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBytesTypeContext is an interface to support dynamic dispatch.
type IBytesTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BYTES() antlr.TerminalNode

	// IsBytesTypeContext differentiates from other interfaces.
	IsBytesTypeContext()
}

type BytesTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBytesTypeContext() *BytesTypeContext {
	var p = new(BytesTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_bytesType
	return p
}

func InitEmptyBytesTypeContext(p *BytesTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = ZserioParserRULE_bytesType
}

func (*BytesTypeContext) IsBytesTypeContext() {}

func NewBytesTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BytesTypeContext {
	var p = new(BytesTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZserioParserRULE_bytesType

	return p
}

func (s *BytesTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *BytesTypeContext) BYTES() antlr.TerminalNode {
	return s.GetToken(ZserioParserBYTES, 0)
}

func (s *BytesTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BytesTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BytesTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case ZserioParserVisitor:
		return t.VisitBytesType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *ZserioParser) BytesType() (localctx IBytesTypeContext) {
	localctx = NewBytesTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, ZserioParserRULE_bytesType)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(778)
		p.Match(ZserioParserBYTES)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

func (p *ZserioParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 53:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *ZserioParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 22)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 21)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 20)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
